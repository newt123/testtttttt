head     1.33;
access   ;
symbols  ;
locks    ;comment  @@;


1.33
date     2005.01.27.09.35.42;  author p4;  state Exp;
branches ;
next     1.32;

1.32
date     2005.01.27.09.35.40;  author p4;  state Exp;
branches ;
next     1.31;

1.31
date     2005.01.27.09.35.40;  author p4;  state Exp;
branches ;
next     1.30;

1.30
date     2005.01.27.09.35.40;  author p4;  state Exp;
branches ;
next     1.29;

1.29
date     2005.01.27.09.35.40;  author p4;  state Exp;
branches ;
next     1.28;

1.28
date     2005.01.27.09.35.39;  author p4;  state Exp;
branches ;
next     1.27;

1.27
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.26;

1.26
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.25;

1.25
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.24;

1.24
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.23;

1.23
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.22;

1.22
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.21;

1.21
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.20;

1.20
date     2005.01.27.09.35.36;  author p4;  state Exp;
branches ;
next     1.19;

1.19
date     2005.01.27.09.35.36;  author p4;  state Exp;
branches ;
next     1.18;

1.18
date     2005.01.27.09.35.35;  author p4;  state Exp;
branches ;
next     1.17;

1.17
date     2005.01.27.09.35.35;  author p4;  state Exp;
branches ;
next     1.16;

1.16
date     2005.01.27.09.35.34;  author p4;  state Exp;
branches ;
next     1.15;

1.15
date     2005.01.27.09.35.33;  author p4;  state Exp;
branches ;
next     1.14;

1.14
date     2005.01.27.09.35.32;  author p4;  state Exp;
branches ;
next     1.13;

1.13
date     2005.01.27.09.35.31;  author p4;  state Exp;
branches ;
next     1.12;

1.12
date     2005.01.27.09.35.31;  author p4;  state Exp;
branches ;
next     1.11;

1.11
date     2005.01.27.09.35.30;  author p4;  state Exp;
branches ;
next     1.10;

1.10
date     2005.01.27.09.35.30;  author p4;  state Exp;
branches ;
next     1.9;

1.9
date     2005.01.27.09.35.30;  author p4;  state Exp;
branches ;
next     1.8;

1.8
date     2005.01.27.09.35.30;  author p4;  state Exp;
branches ;
next     1.7;

1.7
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.6;

1.6
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.5;

1.5
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.27;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.26;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.33
log
@@
text
@/* Generated by mkjambase from Jambase */
char *jambase[] = {
/* Jambase */
"OSFULL = $(OS)$(OSPLAT)$(OSVER) $(OS)$(OSPLAT) $(OS)$(OSVER) $(OS) ;\n",
"switch $(OS)\n",
"{\n",
"case AIX :	LINKLIBS default = -lbsd ;\n",
"case DGUX :	RANLIB default = \"\" ; RELOCATE = true ;\n",
"case HPUX :	RANLIB default = \"\" ;\n",
"INSTALL default = \"\" ;\n",
"case IRIX :	RANLIB default = \"\" ;\n",
"INSTALL default = \"\" ;\n",
"case MVS :	RANLIB default = \"\" ; RELOCATE = true ;\n",
"case NEXT :	AR default = libtool -o ;\n",
"RANLIB default = \"\" ;\n",
"case NCR :	RANLIB default = \"\" ;\n",
"INSTALL default = \"\" ;\n",
"case PTX :	RANLIB default = \"\" ;\n",
"case QNX :	INSTALL default = \"\" ;\n",
"case SCO :	RANLIB default = \"\" ;\n",
"INSTALL default = \"\" ; RELOCATE = true ;\n",
"case SINIX :	RANLIB default = \"\" ; RELOCATE = true ;\n",
"case SOLARIS :	RANLIB default = \"\" ;\n",
"INSTALL default = \"install\" ;\n",
"AR default = \"/usr/ccs/bin/ar ru\" ;\n",
"case UNIXWARE :	RANLIB default = \"\" ; RELOCATE = true ;\n",
"}\n",
"if $(UNIX)\n",
"{\n",
"if $(OS) = QNX \n",
"{\n",
"AR		default = wlib ;\n",
"CC		default = cc ;\n",
"CCFLAGS		default = -Q ;	# quiet\n",
"C++		default = $(CC) ;\n",
"C++FLAGS	default = -Q ;	# quiet\n",
"LINK		default = $(CC) ;\n",
"LINKFLAGS	default = -Q ;	# quiet\n",
"NOARSCAN	default = true ;\n",
"RANLIB		default = \"\" ;\n",
"}\n",
"else if $(OS) = BEOS \n",
"{\n",
"AR		default = mwld -xml -o ;\n",
"BINDIR		default = /boot/bin ;\n",
"CC		default = mwcc ;\n",
"CCFLAGS		default = -nosyspath ;\n",
"C++		default = $(CC) ;\n",
"C++FLAGS	default = -nosyspath ;\n",
"FORTRAN		default = \"\" ;\n",
"LIBDIR		default = /boot/develop/libraries ;\n",
"LINK		default = mwld ;\n",
"LINKFLAGS	default = \"\" ;\n",
"LEX		default = \"\" ;\n",
"MANDIR		default = /boot/documentation/\"Shell Tools\"/HTML ;\n",
"NOARSCAN	default = true ;\n",
"RANLIB		default = \"\" ;	\n",
"STDHDRS		default = /boot/develop/headers/posix ;\n",
"YACC		default = \"\" ;\n",
"YACCFLAGS	default = \"\" ;\n",
"YACCFILES	default = \"\" ;\n",
"}\n",
"AR		default = ar ru ;\n",
"AS		default = as ;\n",
"AWK		default = awk ;\n",
"ASFLAGS		default = ;\n",
"BINDIR		default = /usr/local/bin ;\n",
"C++		default = gcc ;\n",
"C++FLAGS	default = ;\n",
"CC		default = cc ;\n",
"CCFLAGS		default = ;\n",
"CP		default = cp ;\n",
"CHMOD		default = chmod ;\n",
"DOT		default	= . ;\n",
"DOTDOT		default	= .. ;\n",
"EXEMODE		default = 711 ;\n",
"FILEMODE	default = 644 ;\n",
"FORTRAN		default = f77 ;\n",
"FORTRANFLAGS	default = ;\n",
"HDRS		default = ;\n",
"INSTALL		default = install -c ;\n",
"LEX		default = lex ;\n",
"LIBDIR		default = /usr/local/lib ;\n",
"LINK		default = $(CC) ;\n",
"LINKFLAGS	default = $(CCFLAGS) ;\n",
"LINKLIBS	default = ;\n",
"LN		default = ln ;\n",
"MANDIR		default = /usr/local/man ;\n",
"MKDIR		default = mkdir ;\n",
"MV		default = mv -f ;\n",
"OPTIM		default = -O ;\n",
"RANLIB		default = ranlib ;\n",
"RCP		default = rcp ;\n",
"RSH		default = rsh ;\n",
"RM		default = rm -f ;\n",
"SED		default = sed ;\n",
"SHELLHEADER	default = \"#!/bin/sh\" ;\n",
"SHELLMODE	default = 755 ;\n",
"SLASH		default = / ;\n",
"STDHDRS		default = /usr/include ;\n",
"SUFLIB		default = .a ;\n",
"SUFOBJ		default = .o ;\n",
"SUFEXE		default = \"\" ;\n",
"UNDEFFLAG	default = \"-u _\" ;\n",
"YACC		default = yacc ;\n",
"YACCFLAGS	default = -d ;\n",
"YACCFILES	default = y.tab ;\n",
"}\n",
"else if $(NT)\n",
"{\n",
"AWK		default = awk ;\n",
"CHMOD		default = chmod ;\n",
"CP		default = copy ;\n",
"DOT		default	= . ;\n",
"DOTDOT		default	= .. ;\n",
"EXEMODE		default = 711 ;\n",
"FILEMODE	default = 644 ;\n",
"MKDIR		default = mkdir ;\n",
"MV		default = mv -f ;\n",
"OS			= NT ;		# replace Windows_NT\n",
"RCP		default = rcp ;\n",
"RSH		default = rsh ;\n",
"RM		default = del /f/q ;\n",
"SED		default = sed ;\n",
"SLASH		default = \\\\ ;\n",
"SUFLIB		default = .lib ;\n",
"SUFOBJ		default = .obj ;\n",
"SUFEXE		default = .exe ;\n",
"if $(BCCROOT)\n",
"{\n",
"ECHO \"Compiler is Borland C++\" ;\n",
"AR		default = tlib ;\n",
"ARFLAGS		default = /C /P64 ;\n",
"CC		default = bcc32 ;\n",
"CCFLAGS		default = -v -w- -DNT ;\n",
"C++		default = bcc32 ;\n",
"C++FLAGS	default = -v -w- ;\n",
"LINK		default = $(CC) ;\n",
"LINKFLAGS	default = $(CCFLAGS) ;\n",
"STDLIBPATH	default = $(BCCROOT)\\\\lib ;\n",
"STDHDRS		default = $(BCCROOT)\\\\include ;\n",
"NOARSCAN	default = true ;\n",
"}\n",
"else if $(MSVC)\n",
"{\n",
"ECHO \"Compiler is Microsoft Visual C++ 16 bit\" ;\n",
"AR		default = lib /nologo ;\n",
"CC		default = cl /nologo ;\n",
"CCFLAGS		default = /D \\\"WIN\\\" ;\n",
"C++		default = $(CC) ;\n",
"C++FLAGS	default = $(CCFLAGS) ;\n",
"LINK		default = $(CC) ;\n",
"LINKFLAGS	default = $(CCFLAGS) ;\n",
"LINKLIBS	default = \n",
"$(MSVC)\\\\lib\\\\mlibce.lib\n",
"$(MSVC)\\\\lib\\\\oldnames.lib\n",
";\n",
"LINKLIBS	default = ;\n",
"NOARSCAN	default = true ;\n",
"OPTIM		default =  ;\n",
"STDHDRS		default = $(MSVC)\\\\include ;\n",
"UNDEFFLAG	default = \"/u _\" ;\n",
"}\n",
"else if $(MSVCNT)\n",
"{\n",
"ECHO \"Compiler is Microsoft Visual C++\" ;\n",
"AR		default = lib ;\n",
"AS		default = masm386 ;\n",
"CC		default = cl /nologo ;\n",
"CCFLAGS		default = ;\n",
"C++		default = $(CC) ;\n",
"C++FLAGS	default = $(CCFLAGS) ;\n",
"LINK		default = link ;\n",
"LINKFLAGS	default = ;\n",
"LINKLIBS	default = $(MSVCNT)\\\\lib\\\\advapi32.lib\n",
"$(MSVCNT)\\\\lib\\\\libc.lib\n",
"$(MSVCNT)\\\\lib\\\\oldnames.lib\n",
"$(MSVCNT)\\\\lib\\\\kernel32.lib ;\n",
"OPTIM		default =  ;\n",
"STDHDRS		default = $(MSVCNT)\\\\include ;\n",
"UNDEFFLAG	default = \"/u _\" ;\n",
"}\n",
"else\n",
"{\n",
"EXIT On NT, set BCCROOT, MSVCNT, or MSVC to the root of the\n",
"Borland or Microsoft directories. ;\n",
"}\n",
"}\n",
"else if $(OS2)\n",
"{\n",
"WATCOM		default = $(watcom) ;\n",
"CP		default = copy ;\n",
"DOT		default	= . ;\n",
"DOTDOT		default	= .. ;\n",
"MKDIR		default = mkdir ;\n",
"MV		default = move ;\n",
"RM		default = del /f ;\n",
"SED		default = sed ;\n",
"SLASH		default = \\\\ ;\n",
"SUFLIB		default = .lib ;\n",
"SUFOBJ		default = .obj ;\n",
"SUFEXE		default = .exe ;\n",
"if ! $(WATCOM)\n",
"{\n",
"EXIT On OS2, set WATCOM to the root of the Watcom directory. ;\n",
"}\n",
"ECHO \"OS2 compiler is Watcom.\" ;\n",
"AR		default = wlib ;\n",
"CC		default = wcc386 ;\n",
"CCFLAGS		default = /zq /DOS2 /I$(WATCOM)\\\\h ; # zq=quiet\n",
"C++		default = wpp386 ;\n",
"C++FLAGS	default = $(CCFLAGS) ;\n",
"LINK		default = wcl386 ;\n",
"LINKFLAGS	default = /zq ; # zq=quiet\n",
"LINKLIBS	default = ;\n",
"NOARSCAN	default = true ;\n",
"OPTIM		default = ;\n",
"STDHDRS		default = $(WATCOM)\\\\h ;\n",
"UNDEFFLAG	default = \"/u _\" ;\n",
"}\n",
"else if $(VMS)\n",
"{\n",
"AS		default = as ;\n",
"CC		default = cc ;\n",
"CCFLAGS		default = ;\n",
"CP		default = copy/replace ;\n",
"CRELIB		default = true ;\n",
"DOT		default	= [] ;\n",
"DOTDOT		default	= [-] ;\n",
"EXEMODE		default = (w:e) ;\n",
"FILEMODE	default = (w:r) ;\n",
"HDRS		default = ;\n",
"LEX		default = lex ;\n",
"LINK		default = link ;\n",
"LINKFLAGS	default = ;\n",
"LINKLIBS	default = ;\n",
"MV		default = rename ;\n",
"OPTIM		default = ;\n",
"RM		default = delete ;\n",
"RUNVMS		default = mcr ;\n",
"SED		default = sed ;\n",
"SHELLMODE	default = (w:er) ;\n",
"SLASH		default = . ;\n",
"STDHDRS		default = decc$library_include ;\n",
"SUFLIB		default = .olb ;\n",
"SUFOBJ		default = .obj ;\n",
"SUFEXE		default = .exe ;\n",
"switch $(OS) \n",
"{\n",
"case OPENVMS : CCFLAGS default = /stand=vaxc ;\n",
"case VMS     : LINKLIBS default = sys$library:vaxcrtl.olb/lib ;\n",
"}\n",
"}\n",
"else if $(MAC)\n",
"{\n",
"CWGUSI		default = \"{CWGUSI}\" ;\n",
"CWMAC		default = \"{CWMAC}\" ;\n",
"CWGUSIHDR	default = $(CWGUSI):include ;\n",
"CWGUSILIB	default = $(CWGUSI):Lib ;\n",
"CWMACLIB	default = $(CWMAC):Libraries ;\n",
"CWMACHDR	default = $(CWMAC):Headers ;\n",
"CC		default = mwcppc ;\n",
"CCFLAGS		default = -w off ;\n",
"CP		default = copy ;\n",
"DOT		default = \":\" ;\n",
"DOTDOT		default = \"::\" ;\n",
"HDRS		default = $(CWGUSIHDR) \n",
"$(CWMACHDR):\"ANSI Headers\" \n",
"$(CWMACHDR):\"Universal Headers\" ;\n",
"LINK		default = mwlinkppc ;\n",
"LINKFLAGS	default = -mpwtool -warn ;\n",
"LINKLIBS	default = \"$(CWGUSILIB):GUSIMPW.Lib.PPC\" \n",
"\"$(CWGUSILIB):GUSI.Lib.PPC\" \n",
"\"$(CWMACLIB):MacOS Common:Interfacelib\" \n",
"\"$(CWMACLIB):MacOS Common:PLStringFuncs Glue:PLStringFuncsPPC.lib\" \n",
"\"$(CWMACLIB):Runtime:Runtime PPC:MWMPWCRuntime.lib\" \n",
"\"$(CWMACLIB):ANSI PPC:MPW ANSI.C.PPC.Lib\" \n",
"\"$(CWMACLIB):MacOS PPC:PPCToolLibs.o\" \n",
"\"$(CWMACLIB):MacOS PPC:Mathlib\" ;\n",
"MKDIR		default = newfolder ;\n",
"MV		default = rename ;\n",
"NOARSCAN	default = true ;\n",
"OPTIM		default = ;\n",
"RM		default = delete ;\n",
"SLASH		default = \":\" ;\n",
"STDHDRS		default = ; #$(MWCIncludes) ;\n",
"SUFLIB		default = .lib ;\n",
"SUFOBJ		default = .o ;\n",
"SUFEXE		default = \"\" ;\n",
"NOARSCAN	default = true ;\n",
"}\n",
"if $(NT) || $(OS2)\n",
"{\n",
"MSLIB 		default = lib ;\n",
"MSLINK		default = link ;\n",
"MSIMPLIB 	default = implib ;\n",
"MSRC		default = rc ;\n",
"}\n",
"JAMFILE		default = Jamfile ;\n",
"JAMRULES	default = Jamrules ;\n",
"HDRPATTERN = \"^#[	 ]*include[	 ]*[<\\\"](.*)[\\\">].*$\" ;\n",
"DEPENDS all : shell files lib exe obj ;\n",
"DEPENDS all shell files lib exe obj : first ;\n",
"NOTFILE all first shell files lib exe obj dirs clean uninstall ;\n",
"ALWAYS clean uninstall ;\n",
"rule As\n",
"{\n",
"DEPENDS $(<) : $(>) ;\n",
"ASFLAGS on $(<) += $(ASFLAGS) $(SUBDIRASFLAGS) ;\n",
"}\n",
"rule Bulk\n",
"{\n",
"local i ;\n",
"for i in $(>)\n",
"{\n",
"File $(i:D=$(<)) : $(i) ;\n",
"}\n",
"}\n",
"rule Cc\n",
"{\n",
"local _h ;\n",
"DEPENDS $(<) : $(>) ;\n",
"CCFLAGS on $(<) += $(CCFLAGS) $(SUBDIRCCFLAGS) ;\n",
"if $(RELOCATE)\n",
"{\n",
"CcMv $(<) : $(>) ;\n",
"}\n",
"_h = $(SEARCH_SOURCE) $(HDRS) $(SUBDIRHDRS) ;\n",
"if $(VMS) && $(_h)\n",
"{\n",
"SLASHINC on $(<) = \"/inc=(\" $(_h[1]) ,$(_h[2-]) \")\" ;\n",
"}\n",
"else if $(MAC) && $(_h)\n",
"{\n",
"local _i _j ;\n",
"_j = $(_h[1]) ;\n",
"for _i in $(_h[2-])\n",
"{\n",
"_j = $(_j),$(_i) ;\n",
"}\n",
"MACINC on $(<) = \\\"$(_j)\\\" ;\n",
"}\n",
"}\n",
"rule C++\n",
"{\n",
"local _h ;\n",
"DEPENDS $(<) : $(>) ;\n",
"C++FLAGS on $(<) += $(C++FLAGS) $(SUBDIRC++FLAGS) ;\n",
"if $(RELOCATE)\n",
"{\n",
"CcMv $(<) : $(>) ;\n",
"}\n",
"_h = $(SEARCH_SOURCE) $(HDRS) $(SUBDIRHDRS) ;\n",
"if $(VMS) && $(_h)\n",
"{\n",
"SLASHINC on $(<) = \"/inc=(\" $(_h[1]) ,$(_h[2-]) \")\" ;\n",
"}\n",
"else if $(MAC) && $(_h)\n",
"{\n",
"local _i _j ;\n",
"_j = $(_h[1]) ;\n",
"for _i in $(_h[2-])\n",
"{\n",
"_j = $(_j),$(_i) ;\n",
"}\n",
"MACINC on $(<) = \\\"$(_j)\\\" ;\n",
"}\n",
"}\n",
"rule File\n",
"{\n",
"DEPENDS files : $(<) ;\n",
"DEPENDS $(<) : $(>) ;\n",
"SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"MODE on $(<) = $(FILEMODE) ;\n",
"Chmod $(<) ;\n",
"}\n",
"rule Fortran\n",
"{\n",
"DEPENDS $(<) : $(>) ;\n",
"}\n",
"rule GenFile \n",
"{\n",
"local s ;\n",
"makeGristedName s : $(<) ;\n",
"Depends $(s) : $(>[1]:S=$(SUFEXE)) $(>[2-]) ;\n",
"GenFile1 $(s) : $(>[1]:S=$(SUFEXE)) $(>[2-]) ;\n",
"Clean clean : $(s) ;\n",
"}\n",
"rule GenFile1\n",
"{\n",
"MakeLocate $(<) : $(LOCATE_SOURCE) ;\n",
"SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"}\n",
"rule HardLink\n",
"{\n",
"DEPENDS files : $(<) ;\n",
"DEPENDS $(<) : $(>) ;\n",
"SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"}\n",
"rule HdrRule\n",
"{\n",
"local s ;\n",
"if $(HDRGRIST) \n",
"{ \n",
"s = $(>:G=$(HDRGRIST)) ;\n",
"} else { \n",
"s = $(>) ; \n",
"}\n",
"INCLUDES $(<) : $(s) ;\n",
"SEARCH on $(s) = $(HDRSEARCH) ;\n",
"NOCARE $(s) ;\n",
"HDRSEARCH on $(s) = $(HDRSEARCH) ;\n",
"HDRSCAN on $(s) = $(HDRSCAN) ;\n",
"HDRRULE on $(s) = $(HDRRULE) ;\n",
"HDRGRIST on $(s) = $(HDRGRIST) ;\n",
"}\n",
"rule InstallInto\n",
"{\n",
"local i t ;\n",
"t = $(>:G=installed) ;\n",
"DEPENDS install : $(t) ;\n",
"DEPENDS $(t) : $(>) ;\n",
"SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"MakeLocate $(t) : $(<) ;\n",
"Clean uninstall : $(t) ;\n",
"for i in $(>)\n",
"{\n",
"Install $(i:G=installed) : $(i) ;\n",
"}\n",
"if ! $(INSTALL)\n",
"{\n",
"Chmod $(t) ;\n",
"if $(OWNER) { Chown $(t) ; OWNER on $(t) = $(OWNER) ; }\n",
"if $(GROUP) { Chgrp $(t) ; GROUP on $(t) = $(GROUP) ; }\n",
"}\n",
"}\n",
"rule InstallBin\n",
"{\n",
"InstallInto $(<) : $(>) ;\n",
"MODE on $(>:G=installed) = $(EXEMODE) ;\n",
"}\n",
"rule InstallFile\n",
"{\n",
"InstallInto $(<) : $(>) ;\n",
"MODE on $(>:G=installed) = $(FILEMODE) ;\n",
"}\n",
"rule InstallLib\n",
"{\n",
"InstallInto $(<) : $(>) ;\n",
"MODE on $(>:G=installed) = $(FILEMODE) ;\n",
"}\n",
"rule InstallMan\n",
"{\n",
"local i s d ;\n",
"for i in $(>)\n",
"{\n",
"switch $(i:S)\n",
"{\n",
"case .1 : s = 1 ; case .2 : s = 2 ; case .3 : s = 3 ;\n",
"case .4 : s = 4 ; case .5 : s = 5 ; case .6 : s = 6 ;\n",
"case .7 : s = 7 ; case .8 : s = 8 ; case .l : s = l ;\n",
"case .n : s = n ; case .man : s = 1 ;\n",
"}\n",
"d = man$(s) ;\n",
"InstallInto $(d:R=$(<)) : $(i) ;\n",
"}\n",
"MODE on $(>:G=installed) = $(FILEMODE) ;\n",
"}\n",
"rule InstallShell\n",
"{\n",
"InstallInto $(<) : $(>) ;\n",
"MODE on $(>:G=installed) = $(SHELLMODE) ;\n",
"}\n",
"rule Lex\n",
"{\n",
"DEPENDS $(<) : $(>) ;\n",
"MakeLocate $(<) : $(LOCATE_SOURCE) ;\n",
"Clean clean : $(<) ;\n",
"}\n",
"rule Library\n",
"{\n",
"LibraryFromObjects $(<) : $(>:S=$(SUFOBJ)) ;\n",
"Objects $(>) ;\n",
"}\n",
"rule LibraryFromObjects\n",
"{\n",
"local i l s ;\n",
"makeGristedName s : $(>) ;\n",
"l = $(<:S=$(SUFLIB)) ;\n",
"if $(KEEPOBJS)\n",
"{\n",
"DEPENDS obj : $(s) ;\n",
"}\n",
"else\n",
"{\n",
"DEPENDS lib : $(l) ;\n",
"}\n",
"if ! $(l:D)\n",
"{\n",
"MakeLocate $(l) $(l)($(s:BS)) : $(LOCATE_TARGET) ;\n",
"}\n",
"if $(NOARSCAN) \n",
"{ \n",
"DEPENDS $(l) : $(s) ;\n",
"}\n",
"else\n",
"{\n",
"DEPENDS $(l) : $(l)($(s:BS)) ;\n",
"for i in $(s)\n",
"{\n",
"DEPENDS $(l)($(i:BS)) : $(i) ;\n",
"}\n",
"}\n",
"Clean clean : $(l) ;\n",
"if $(CRELIB) { CreLib $(l) : $(s[1]) ; }\n",
"Archive $(l) : $(s) ;\n",
"if $(RANLIB) { Ranlib $(l) ; }\n",
"if ! ( $(NOARSCAN) || $(KEEPOBJS) ) { RmTemps $(l) : $(s) ; }\n",
"}\n",
"rule Link\n",
"{\n",
"MODE on $(<) = $(EXEMODE) ;\n",
"Chmod $(<) ;\n",
"}\n",
"rule LinkLibraries\n",
"{\n",
"local t ;\n",
"if $(<:S)\n",
"{\n",
"t = $(<) ;\n",
"} else {\n",
"t = $(<:S=$(SUFEXE)) ;\n",
"}\n",
"DEPENDS $(t) : $(>:S=$(SUFLIB)) ;\n",
"NEEDLIBS on $(t) += $(>:S=$(SUFLIB)) ;\n",
"}\n",
"rule Main\n",
"{\n",
"MainFromObjects $(<) : $(>:S=$(SUFOBJ)) ;\n",
"Objects $(>) ;\n",
"}\n",
"rule MainFromObjects\n",
"{\n",
"local s t ;\n",
"makeGristedName s : $(>) ;\n",
"makeSuffixed t $(SUFEXE) : $(<) ;\n",
"if $(t) != $(<)\n",
"{\n",
"DEPENDS $(<) : $(t) ;\n",
"NOTFILE $(<) ;\n",
"}\n",
"DEPENDS exe : $(t) ;\n",
"DEPENDS $(t) : $(s) ;\n",
"MakeLocate $(t) : $(LOCATE_TARGET) ;\n",
"Clean clean : $(t) ;\n",
"Link $(t) : $(s) ;\n",
"}\n",
"rule MakeLocate\n",
"{\n",
"if $(>)\n",
"{\n",
"LOCATE on $(<) = $(>) ;\n",
"Depends $(<) : $(>[1]) ;\n",
"MkDir $(>[1]) ;\n",
"}\n",
"}\n",
"rule MkDir\n",
"{\n",
"if $(<) != $(DOT) && ! $($(<)-mkdir) \n",
"{\n",
"local s ;\n",
"$(<)-mkdir = true ;\n",
"MkDir1 $(<) ;\n",
"NOUPDATE $(<) ;\n",
"Depends dirs : $(<) ;\n",
"s = $(<:P) ;\n",
"if $(NT)\n",
"{\n",
"switch $(s)\n",
"{\n",
"case *:   : s = ;\n",
"case *:\\\\ : s = ;\n",
"}\n",
"}\n",
"if $(s) && $(s) != $(<)\n",
"{\n",
"Depends $(<) : $(s) ;\n",
"MkDir $(s) ;\n",
"}\n",
"else if $(s)\n",
"{\n",
"NOTFILE $(s) ;\n",
"}\n",
"}\n",
"}\n",
"rule Object\n",
"{\n",
"local h ;\n",
"Clean clean : $(<) ;\n",
"MakeLocate $(<) : $(LOCATE_TARGET) ;\n",
"SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"HDRS on $(<) = $(SEARCH_SOURCE) $(HDRS) $(SUBDIRHDRS) ;\n",
"if $(SEARCH_SOURCE)\n",
"{\n",
"h = $(SEARCH_SOURCE) ;\n",
"}\n",
"else\n",
"{\n",
"h = \"\" ;\n",
"}\n",
"HDRRULE on $(>) = HdrRule ;\n",
"HDRSCAN on $(>) = $(HDRPATTERN) ;\n",
"HDRSEARCH on $(>) = $(HDRS) $(SUBDIRHDRS) $(h) $(STDHDRS) ;\n",
"HDRGRIST on $(>) = $(HDRGRIST) ;\n",
"switch $(>:S)\n",
"{\n",
"case .asm : As $(<) : $(>) ;\n",
"case .c :	Cc $(<) : $(>) ;\n",
"case .C :	C++ $(<) : $(>) ;\n",
"case .cc :	C++ $(<) : $(>) ;\n",
"case .cpp : C++ $(<) : $(>) ;\n",
"case .f :	Fortran $(<) : $(>) ;\n",
"case .l :	Cc $(<) : $(<:S=.c) ;\n",
"Lex $(<:S=.c) : $(>) ;\n",
"case .s :	As $(<) : $(>) ;\n",
"case .y :	Cc $(<) : $(<:S=.c) ;\n",
"Yacc $(<:S=.c) : $(>) ;\n",
"case * :	UserObject $(<) : $(>) ;\n",
"}\n",
"}\n",
"rule ObjectCcFlags\n",
"{\n",
"local s ;\n",
"makeGristedName s : $(<:S=$(SUFOBJ)) ;\n",
"CCFLAGS on $(s) += $(>) ;\n",
"}\n",
"rule ObjectC++Flags\n",
"{\n",
"local s ;\n",
"makeGristedName s : $(<:S=$(SUFOBJ)) ;\n",
"C++FLAGS on $(s) += $(>) ;\n",
"}\n",
"rule ObjectHdrs\n",
"{\n",
"local s ;\n",
"makeGristedName s : $(<:S=$(SUFOBJ)) ;\n",
"HDRS on $(s) += $(>) ;\n",
"}\n",
"rule Objects\n",
"{\n",
"local i s ;\n",
"makeGristedName s : $(<) ;\n",
"for i in $(s)\n",
"{\n",
"Object $(i:S=$(SUFOBJ)) : $(i) ;\n",
"DEPENDS obj : $(i:S=$(SUFOBJ)) ;\n",
"}\n",
"}\n",
"rule RmTemps\n",
"{\n",
"TEMPORARY $(>) ;\n",
"}\n",
"rule Setuid\n",
"{\n",
"local t ;\n",
"if $(<:S)\n",
"{\n",
"t = $(<) ;\n",
"} else {\n",
"t = $(<:S=$(SUFEXE)) ;\n",
"}\n",
"MODE on $(t) = 4711 ;\n",
"}\n",
"rule Shell\n",
"{\n",
"DEPENDS shell : $(<) ;\n",
"DEPENDS $(<) : $(>) ;\n",
"SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"MODE on $(<) = $(SHELLMODE) ;\n",
"Clean clean : $(<) ;\n",
"Chmod $(<) ;\n",
"}\n",
"rule SubDir\n",
"{\n",
"local r s ;\n",
"if ! $($(<[1]))\n",
"{\n",
"if ! $(<[1])\n",
"{\n",
"EXIT SubDir syntax error ;\n",
"}\n",
"makeSubDir $(<[1]) : $(<[2-]) ;\n",
"}\n",
"if ! $($(<[1])-included)\n",
"{\n",
"$(<[1])-included = TRUE ;\n",
"r = $($(<[1])RULES) ;\n",
"if ! $(r)\n",
"{\n",
"r = $(JAMRULES:R=$($(<[1]))) ;\n",
"}\n",
"include $(r) ;\n",
"}\n",
"makeDirName s : $(<[2-]) ;\n",
"SUBDIR = $(s:R=$($(<[1]))) ;\n",
"SUBDIR_TOKENS = $(<[2-]) ;\n",
"SEARCH_SOURCE = $(SUBDIR) ;\n",
"LOCATE_SOURCE = $(ALL_LOCATE_TARGET) $(SUBDIR) ;\n",
"LOCATE_TARGET = $(ALL_LOCATE_TARGET) $(SUBDIR) ;\n",
"makeGrist SOURCE_GRIST : $(<[2-]) ;\n",
"SUBDIRCCFLAGS = ;\n",
"SUBDIRC++FLAGS = ;\n",
"SUBDIRHDRS = ;\n",
"}\n",
"rule SubDirCcFlags\n",
"{\n",
"SUBDIRCCFLAGS += $(<) ;\n",
"}\n",
"rule SubDirC++Flags\n",
"{\n",
"SUBDIRC++FLAGS += $(<) ;\n",
"}\n",
"rule SubDirHdrs\n",
"{\n",
"SUBDIRHDRS += $(<) ;\n",
"}\n",
"rule SubInclude\n",
"{\n",
"local s ;\n",
"if ! $($(<[1]))\n",
"{\n",
"EXIT Top level of source tree has not been set with $(<[1]) ;\n",
"}\n",
"makeDirName s : $(<[2-]) ;\n",
"include $(JAMFILE:D=$(s):R=$($(<[1]))) ;\n",
"}\n",
"rule Undefines\n",
"{\n",
"local t ;\n",
"if $(<:S)\n",
"{\n",
"t = $(<) ;\n",
"} else {\n",
"t = $(<:S=$(SUFEXE)) ;\n",
"}\n",
"UNDEFS on $(t) += $(UNDEFFLAG)$(>) ;\n",
"}\n",
"rule UserObject\n",
"{\n",
"EXIT \"Unknown suffix on\" $(>) \"- see UserObject rule in Jamfile(5).\" ;\n",
"}\n",
"rule Yacc\n",
"{\n",
"local h ;\n",
"h = $(<:BS=.h) ;\n",
"MakeLocate $(<) $(h) : $(LOCATE_SOURCE) ;\n",
"if $(YACC)\n",
"{\n",
"DEPENDS $(<) $(h) : $(>) ;\n",
"Yacc1 $(<) $(h) : $(>) ;\n",
"Clean clean : $(<) $(h) ;\n",
"}\n",
"INCLUDES $(<) : $(h) ;\n",
"}\n",
"rule makeString\n",
"{\n",
"local _t ;\n",
"$(<) = $(>[1]) ;\n",
"for _t in $(>[2-])\n",
"{\n",
"$(<) = $($(<))$(_t) ;\n",
"}\n",
"}\n",
"rule makeSubDir\n",
"{\n",
"local _i _d ;\n",
"if ! $(>[1]) \n",
"{\n",
"_d = $(DOT) ;\n",
"} \n",
"else\n",
"{\n",
"_d = $(DOTDOT) ;\n",
"for _i in $(>[2-])\n",
"{\n",
"_d = $(_d:R=$(DOTDOT)) ;\n",
"}\n",
"}\n",
"$(<) = $(_d) ;\n",
"}\n",
"rule addDirName\n",
"{\n",
"local _s _i ;\n",
"if ! $(>)\n",
"{\n",
"_s = $(DOT) ;\n",
"}\n",
"else if $(VMS)\n",
"{\n",
"switch $(>[1])\n",
"{\n",
"case *:* : _s = $(>[1]) ;\n",
"case \\\\[*\\\\] : _s = $(>[1]) ;\n",
"case * : _s = [.$(>[1])] ;\n",
"}\n",
"for _i in [.$(>[2-])]\n",
"{\n",
"_s = $(_i:R=$(_s)) ;\n",
"}\n",
"}\n",
"else if $(MAC)\n",
"{\n",
"_s = $(DOT) ;\n",
"for _i in $(>)\n",
"{\n",
"_s = $(_i:R=$(_s)) ;\n",
"}\n",
"}\n",
"else\n",
"{\n",
"_s = $(>[1]) ; \n",
"for _i in $(>[2-])\n",
"{\n",
"_s = $(_i:R=$(_s)) ;\n",
"}\n",
"}\n",
"$(<) += $(_s) ;\n",
"}\n",
"rule makeDirName\n",
"{\n",
"$(<) = ; addDirName $(<) : $(>) ;\n",
"}\n",
"rule makeGrist\n",
"{\n",
"local _g _i ;\n",
"_g = $(>[1]) ;\n",
"for _i in $(>[2-])\n",
"{\n",
"_g = $(_g)!$(_i) ;\n",
"}\n",
"$(<) = $(_g) ;\n",
"}\n",
"rule makeGristedName\n",
"{\n",
"local _i _o ;\n",
"if ! $(SOURCE_GRIST)\n",
"{\n",
"$(<) = $(>) ;\n",
"}\n",
"else \n",
"{\n",
"_o = ;\n",
"for _i in $(>)\n",
"{\n",
"switch $(_i)\n",
"{\n",
"case *.h :	_o += $(_i) ;\n",
"case * : 	_o += $(_i:G=$(SOURCE_GRIST)) ;\n",
"}\n",
"}\n",
"$(<) = $(_o) ;\n",
"}\n",
"}\n",
"rule makeCommon\n",
"{\n",
"if $($(<)[1]) && $($(<)[1]) = $($(>)[1])\n",
"{\n",
"$(<) = $($(<)[2-]) ;\n",
"$(>) = $($(>)[2-]) ;\n",
"makeCommon $(<) : $(>) ;\n",
"}\n",
"}\n",
"rule makeRelPath \n",
"{\n",
"local _l _r ;\n",
"_l = $(<[2-]) ;\n",
"_r = $(>) ;\n",
"makeCommon _l : _r ;\n",
"makeSubDir _l : $(_l) ;\n",
"makeDirName _r : $(_r) ;\n",
"if $(_r) = $(DOT) {\n",
"$(<[1]) = $(_l) ;\n",
"} else {\n",
"$(<[1]) = $(_r:R=$(_l)) ;\n",
"}\n",
"}\n",
"rule makeSuffixed\n",
"{\n",
"if $(<[2])\n",
"{\n",
"local _i ;\n",
"$(<[1]) = ;\n",
"for _i in $(>)\n",
"{\n",
"if $(_i:S)\n",
"{\n",
"$(<[1]) += $(_i) ;\n",
"}\n",
"else\n",
"{\n",
"$(<[1]) += $(_i:S=$(<[2])) ;\n",
"}\n",
"}\n",
"}\n",
"else\n",
"{\n",
"$(<[1]) = $(>) ;\n",
"}\n",
"}\n",
"rule unmakeDir\n",
"{\n",
"if $(>[1]:D) && $(>[1]:D) != $(>[1]) && $(>[1]:D) != \\\\\\\\ \n",
"{\n",
"unmakeDir $(<) : $(>[1]:D) $(>[1]:BS) $(>[2-]) ;\n",
"}\n",
"else\n",
"{\n",
"$(<) = $(>) ;\n",
"}\n",
"}\n",
"if $(UNIX)\n",
"{\n",
"if $(OS) = QNX \n",
"{\n",
"actions together piecemeal Archive\n",
"{\n",
"$(AR) $(<) +-$(>) \n",
"}\n",
"}\n",
"else if $(OS) = BEOS\n",
"{\n",
"actions together Archive\n",
"{\n",
"$(AR) $(<) $(>)\n",
"}\n",
"}\n",
"else\n",
"{\n",
"actions updated together piecemeal Archive\n",
"{\n",
"$(AR) $(<) $(>)\n",
"}\n",
"}\n",
"actions As\n",
"{\n",
"$(AS) $(ASFLAGS) -I$(HDRS) -o $(<) $(>)\n",
"}\n",
"if $(OS) = SINIX\n",
"{\n",
"actions C++\n",
"{\n",
"[ $(>:S) != .C ] && $(CP) $(>) $(>:S=.C) && trap \"rm -f $(>:S=.C)\" 0\n",
"$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) $(>:S=.C)\n",
"}\n",
"} \n",
"else if $(RELOCATE)\n",
"{\n",
"actions C++\n",
"{\n",
"$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) $(>)\n",
"}\n",
"}\n",
"else\n",
"{\n",
"actions C++\n",
"{\n",
"$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>)\n",
"}\n",
"}\n",
"actions Cc\n",
"{\n",
"$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>)\n",
"}\n",
"if $(RELOCATE)\n",
"{\n",
"actions Cc\n",
"{\n",
"$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) $(>)\n",
"}\n",
"}\n",
"actions ignore CcMv\n",
"{\n",
"[ $(<) != $(>:BS=$(SUFOBJ)) ] && $(MV) $(>:BS=$(SUFOBJ)) $(<)\n",
"}\n",
"actions Chgrp\n",
"{\n",
"chgrp $(GROUP) $(<)\n",
"}\n",
"actions Chmod\n",
"{\n",
"chmod $(MODE) $(<)\n",
"}\n",
"actions Chown\n",
"{\n",
"chown $(OWNER) $(<)\n",
"}\n",
"actions piecemeal together existing Clean\n",
"{\n",
"$(RM) $(>)\n",
"}\n",
"actions File\n",
"{\n",
"$(RM) $(<)\n",
"$(CP) $(>) $(<)\n",
"}\n",
"actions GenFile1\n",
"{\n",
"$(>[1]) $(<) $(>[2-])\n",
"}\n",
"actions Fortran\n",
"{\n",
"$(FORTRAN) $(FORTRANFLAGS) -o $(<) $(>)\n",
"}\n",
"actions HardLink\n",
"{\n",
"$(RM) $(<) && $(LN) $(>) $(<)\n",
"}\n",
"if $(INSTALL)\n",
"{\n",
"actions Install\n",
"{\n",
"$(INSTALL) -m$(MODE) -o$(OWNER) -g$(GROUP) $(>) $(<)\n",
"}\n",
"}\n",
"else\n",
"{\n",
"actions Install\n",
"{\n",
"$(CP) $(>) $(<) \n",
"}\n",
"}\n",
"actions Lex\n",
"{\n",
"$(LEX) $(>) && $(MV) lex.yy.c $(<)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK) $(LINKFLAGS) -o $(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS) \n",
"}\n",
"actions MkDir1\n",
"{\n",
"$(MKDIR) $(<)\n",
"}\n",
"actions together Ranlib\n",
"{\n",
"$(RANLIB) $(<)\n",
"}\n",
"actions quietly updated piecemeal together RmTemps\n",
"{\n",
"$(RM) $(>)\n",
"}\n",
"actions Shell\n",
"{\n",
"$(AWK) '\n",
"NR == 1 { print \"$(SHELLHEADER)\" }\n",
"NR == 1 && /^[#:]/ { next }\n",
"/^##/ { next }\n",
"{ print }\n",
"' < $(>) > $(<)\n",
"}\n",
"actions Yacc1\n",
"{\n",
"$(YACC) $(YACCFLAGS) $(>) &&\n",
"{\n",
"$(MV) $(YACCFILES).c $(<[1])\n",
"$(MV) $(YACCFILES).h $(<[2])\n",
"}\n",
"}\n",
"}\n",
"else if $(NT) || $(OS2)\n",
"{\n",
"if $(BCCROOT)\n",
"{\n",
"actions C++\n",
"{\n",
"$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o$(<) $(>)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK) -e$(<) $(LINKFLAGS) $(UNDEFS) -L$(LINKLIBS) $(NEEDLIBS) $(>)\n",
"}\n",
"actions updated together piecemeal Archive\n",
"{\n",
"$(AR) $(ARFLAGS) $(<) -+$(>)\n",
"}\n",
"actions Cc\n",
"{\n",
"$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) -o$(<) $(>)\n",
"}\n",
"}\n",
"else if $(MSVC) \n",
"{\n",
"actions updated together piecemeal Archive\n",
"{\n",
"$(AR) $(<) -+$(>) ;\n",
"}\n",
"actions Cc\n",
"{\n",
"$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) $(>)\n",
"}\n",
"actions C++\n",
"{\n",
"$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /Tp$(>)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK) $(LINKFLAGS) /out:$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)\n",
"}\n",
"}\n",
"else if $(MSVCNT)\n",
"{\n",
"actions updated together piecemeal Archive\n",
"{\n",
"if exist $(<) set _$(<:B)_=$(<)\n",
"$(AR) /out:$(<) %_$(<:B)_% $(>)\n",
"}\n",
"actions As\n",
"{\n",
"$(AS) /Ml /p /v /w2 $(>) $(<) ,nul,nul;\n",
"}\n",
"actions Cc\n",
"{\n",
"$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /I$(STDHDRS) $(>)\n",
"}\n",
"actions C++\n",
"{\n",
"$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /I$(STDHDRS) /Tp$(>)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK) $(LINKFLAGS) /out:$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)\n",
"}\n",
"}\n",
"else if $(WATCOM)\n",
"{\n",
"actions together piecemeal Archive\n",
"{\n",
"$(AR) $(<) +-$(>) \n",
"}\n",
"actions Cc\n",
"{\n",
"$(CC) $(CCFLAGS) $(OPTIM) /Fo=$(<) /I$(HDRS) $(>)\n",
"}\n",
"actions C++\n",
"{\n",
"$(C++) $(C++FLAGS) $(OPTIM) /Fo=$(<) /I$(HDRS) $(>)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK) $(LINKFLAGS) /Fe=$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)\n",
"}\n",
"}\n",
"actions Chmod\n",
"{\n",
"}\n",
"actions piecemeal together existing Clean\n",
"{\n",
"$(RM) $(>)\n",
"}\n",
"actions File\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions GenFile1\n",
"{\n",
"$(>[1]) $(<) $(>[2-])\n",
"}\n",
"actions Install\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions MkDir1\n",
"{\n",
"$(MKDIR) $(<)\n",
"}\n",
"actions quietly updated piecemeal together RmTemps\n",
"{\n",
"$(RM) $(>)\n",
"}\n",
"actions Shell\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"}\n",
"else if $(VMS)\n",
"{\n",
"actions updated together piecemeal Archive \n",
"{\n",
"lib/replace $(<) $(>[1]) ,$(>[2-])\n",
"}\n",
"actions Cc\n",
"{ \n",
"cc/obj=$(<) $(CCFLAGS) $(OPTIM) $(SLASHINC) $(>) \n",
"}\n",
"actions C++\n",
"{ \n",
"cxx/obj=$(<) $(C++FLAGS) $(OPTIM) $(SLASHINC) $(>) \n",
"}\n",
"actions Chmod\n",
"{\n",
"set file/prot=$(MODE) $(<)\n",
"}\n",
"actions piecemeal together existing Clean\n",
"{\n",
"$(RM) $(>[1]);* ,$(>[2-]);*\n",
"}\n",
"actions together quietly CreLib\n",
"{\n",
"if f$search(\"$(<)\") .eqs. \"\" then lib/create $(<)\n",
"}\n",
"actions File\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions GenFile1\n",
"{\n",
"mcr $(>[1]) $(<) $(>[2-])\n",
"}\n",
"actions Install\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions Lex\n",
"{\n",
"$(LEX) $(>) \n",
"$(MV) lex.yy.c $(<)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK)/exe=$(<) $(LINKFLAGS) $(>[1]) ,$(>[2-]) ,$(NEEDLIBS)/lib ,$(LINKLIBS)\n",
"}\n",
"actions MkDir1\n",
"{\n",
"create/dir $(<)\n",
"}\n",
"actions quietly updated piecemeal together RmTemps\n",
"{\n",
"$(RM) $(>[1]);* ,$(>[2-]);*\n",
"}\n",
"actions Shell\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions Yacc1\n",
"{\n",
"$(YACC) $(YACCFLAGS) $(>)\n",
"$(MV) $(YACCFILES).c $(<[1])\n",
"$(MV) $(YACCFILES).h $(<[2])\n",
"}\n",
"}\n",
"else if $(MAC)\n",
"{\n",
"SP = \" \" ;\n",
"actions together piecemeal Archive \n",
"{\n",
"$(LINK) -library -o $(<) $(>)\n",
"}\n",
"actions Cc\n",
"{\n",
"set MWCincludes $(MACINC)\n",
"$(CC) -o $(<) $(CCFLAGS) $(OPTIM) $(>) \n",
"}\n",
"actions C++\n",
"{ \n",
"set MWCincludes $(MACINC)\n",
"$(CC) -o $(<) $(C++FLAGS) $(OPTIM) $(>) \n",
"}\n",
"rule Chmod\n",
"{\n",
"}\n",
"actions piecemeal together existing Clean\n",
"{\n",
"$(RM) $(>)\n",
"}\n",
"actions File\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions GenFile1\n",
"{\n",
"$(>[1]) $(<) $(>[2-])\n",
"}\n",
"actions Install\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"actions Link bind NEEDLIBS\n",
"{\n",
"$(LINK) -o $(<) $(LINKFLAGS) $(>) $(NEEDLIBS) \"$(LINKLIBS)\"\n",
"}\n",
"actions MkDir1\n",
"{\n",
"$(MKDIR) $(<)\n",
"}\n",
"actions quietly updated piecemeal together RmTemps\n",
"{\n",
"$(RM) $(>)\n",
"}\n",
"actions Shell\n",
"{\n",
"copy $(>) $(<)\n",
"}\n",
"}\n",
"rule BULK { Bulk $(<) : $(>) ; }\n",
"rule FILE { File $(<) : $(>) ; }\n",
"rule HDRRULE { HdrRule $(<) : $(>) ; }\n",
"rule INSTALL { Install $(<) : $(>) ; }\n",
"rule LIBRARY { Library $(<) : $(>) ; }\n",
"rule LIBS { LinkLibraries $(<) : $(>) ; }\n",
"rule LINK { Link $(<) : $(>) ; }\n",
"rule MAIN { Main $(<) : $(>) ; }\n",
"rule SETUID { Setuid $(<) ; }\n",
"rule SHELL { Shell $(<) : $(>) ; }\n",
"rule UNDEFINES { Undefines $(<) : $(>) ; }\n",
"rule INSTALLBIN { InstallBin $(BINDIR) : $(<) ; }\n",
"rule INSTALLLIB { InstallLib $(LIBDIR) : $(<) ; }\n",
"rule INSTALLMAN { InstallMan $(MANDIR) : $(<) ; }\n",
"{\n",
"if $(JAMFILE) { include $(JAMFILE) ; }\n",
"}\n",
0 };
@


1.32
log
@@
text
@d52 2
a53 1
"LINK		default = $(CC) ;\n",
@


1.31
log
@@
text
@d255 2
a256 1
"CWGUSI		default = \"Macintosh HD:Perforce:mac:CWGUSI\" ;\n",
a258 1
"CWMAC		default = \"Macintosh HD:CW10 Gold:Metrowerks CodeWarrior:MacOS Support\" ;\n",
d266 3
a268 1
"HDRS		default = $(CWGUSIHDR) $(CWMACHDR):\"ANSI Headers\" $(CWMACHDR):\"Universal Headers\" ;\n",
@


1.30
log
@@
text
@@


1.29
log
@@
text
@d4 2
a5 7
"OS ?= $(OSNAME) ;\n",
"OSFULL = \n",
"$(OSNAME)$(OSPLAT)$(OSVER) \n",
"$(OSNAME)$(OSPLAT) \n",
"$(OSNAME)$(OSVER) \n",
"$(OSNAME) ;\n",
"switch $(OSNAME)\n",
d30 1
a30 1
"if $(OSNAME) = QNX \n",
d42 1
a42 1
"else if $(OSNAME) = BEOS \n",
d247 1
a247 1
"switch $(OSNAME) \n",
d920 1
a920 1
"if $(OSNAME) = QNX \n",
d927 1
a927 1
"else if $(OSNAME) = BEOS\n",
d945 1
a945 1
"if $(OSNAME) = SINIX\n",
@


1.28
log
@@
text
@d4 7
a10 2
"OSFULL = $(OS)$(OSPLAT)$(OSVER) $(OS)$(OSPLAT) $(OS)$(OSVER) $(OS) ;\n",
"switch $(OS)\n",
d35 1
a35 1
"if $(OS) = QNX \n",
d47 1
a47 1
"else if $(OS) = BEOS \n",
d252 1
a252 1
"switch $(OS) \n",
d925 1
a925 1
"if $(OS) = QNX \n",
d932 1
a932 1
"else if $(OS) = BEOS\n",
d950 1
a950 1
"if $(OS) = SINIX\n",
@


1.27
log
@@
text
@a177 1
"STDLIBFLAG	default =  ;\n",
a320 4
"if $(SUBDIRSTDLIBFLAG)\n",
"{\n",
"STDLIBFLAG on $(<) = $(SUBDIRSTDLIBFLAG) ;\n",
"}\n",
a345 4
"if $(SUBDIRSTDLIBFLAG)\n",
"{\n",
"STDLIBFLAG on $(<) = $(SUBDIRSTDLIBFLAG) ;\n",
"}\n",
a639 6
"rule ObjectStdLibFlag\n",
"{\n",
"local s ;\n",
"makeGristedName s : $(<:S=$(SUFOBJ)) ;\n",
"STDLIBFLAG on $(s) = $(>) ;\n",
"}\n",
d682 1
a682 1
"local r s l ;\n",
a708 1
"SUBDIRSTDLIBFLAG = ;\n",
a711 4
"rule SubDirStdLibFlag\n",
"{\n",
"SUBDIRSTDLIBFLAG = $(<) ;\n",
"}\n",
d950 1
a950 1
"$(C++) -c $(OPTIM) $(C++FLAGS) -I$(HDRS) $(>:S=.C)\n",
d1120 1
a1120 1
"$(CC) /c $(OPTIM) $(CCFLAGS) $(STDLIBFLAG) /Fo$(<) /I$(HDRS) /I$(STDHDRS) $(>)\n",
d1124 1
a1124 1
"$(C++) /c $(OPTIM) $(C++FLAGS) $(STDLIBFLAG) /Fo$(<) /I$(HDRS) /I$(STDHDRS) /Tp$(>)\n",
@


1.26
log
@@
text
@d178 1
d322 4
d351 4
d649 6
d697 1
a697 1
"local r s ;\n",
d724 1
d728 4
d970 1
a970 1
"$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) $(>:S=.C)\n",
d1140 1
a1140 1
"$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /I$(STDHDRS) $(>)\n",
d1144 1
a1144 1
"$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /I$(STDHDRS) /Tp$(>)\n",
@


1.25
log
@@
text
@d255 1
a255 1
"CWGUSI		default = \"Macintosh HD:Perforce:src:mac:CWGUSI\" ;\n",
@


1.24
log
@@
text
@d14 2
d134 1
a134 1
"CCFLAGS		default = -v -w-  ;\n",
@


1.23
log
@@
text
@a8 1
"case IRIX :	RANLIB default = \"\" ;\n",
d11 2
@


1.22
log
@@
text
@d327 9
d337 1
d352 7
d360 3
d723 1
a723 1
"local i s ;\n",
d728 1
a728 9
"s = $(<[2]) ;\n",
"for i in $(<[3-])\n",
"{\n",
"s = $(s)$(SLASH)$(i) ;\n",
"}\n",
"if $(VMS)\n",
"{\n",
"s = [.$(s)] ;\n",
"}\n",
d805 8
d1254 2
a1255 1
"$(CC) -o $(<) -i$(SP)\"$(HDRS)\" \"$(CCFLAGS)\" $(OPTIM) $(>) \n",
d1259 2
a1260 1
"$(CC) -o $(<) -i$(SP)\"$(HDRS)\" \"$(C++FLAGS)\" $(OPTIM) $(>) \n",
@


1.21
log
@@
text
@d252 6
d261 3
a263 3
"DOT		default = \"\" ;\n",
"DOTDOT		default = :: ;\n",
"HDRS		default = ;\n",
d265 9
a273 1
"LINKFLAGS	default = -mpwtool ;\n",
d276 1
d280 1
a280 1
"STDHDRS		default = $(MWCIncludes) ;\n",
d284 1
d1227 1
d1233 2
a1234 2
"{ \n",
"$(CC) -o $(<) $(CCFLAGS) $(OPTIM) $(>) \n",
d1238 1
a1238 1
"$(CC) -o $(<) $(CCFLAGS) $(OPTIM) $(>) \n",
d1240 1
a1240 1
"actions Chmod\n",
a1241 1
"set file/prot=$(MODE) $(<)\n",
d1261 1
a1261 1
"$(LINK) -o $(<) $(LINKFLAGS) $(>) $(NEEDLIBS) $(LINKLIBS)\n",
@


1.20
log
@@
text
@d250 20
d1209 51
@


1.19
log
@@
text
@a3 1
"if $(NT) { OS = NT ; }\n",
d225 1
a225 1
"DOTDOT		default	= - ;\n",
d528 4
d732 1
a732 1
"_d = $(_d)$(SLASH)$(DOTDOT) ;\n",
a734 4
"if $(VMS)\n",
"{\n",
"_d = [$(_d)] ;\n",
"}\n",
d740 1
a740 1
"if $(>)\n",
d742 3
a744 1
"if $(VMS)\n",
d750 1
a750 1
"case * : _s = [$(>[1])] ;\n",
d762 1
a762 3
"_s = $(_s)$(SLASH)$(_i) ;\n",
"}\n",
"}\n",
a763 3
"else\n",
"{\n",
"_s = $(DOT) ;\n",
@


1.18
log
@@
text
@d223 1
d225 1
a225 1
"DOT		default	= \"\" ;\n",
d237 1
d287 1
a287 1
"_h = $(HDRS) $(SUBDIRHDRS) ;\n",
d302 1
a302 1
"_h = $(HDRS) $(SUBDIRHDRS) ;\n",
d515 1
a515 1
"s = $(<:D) ;\n",
d676 1
a676 1
"s = [$(s)] ;\n",
d699 1
a701 1
"MakeLocate $(<) $(h) : $(LOCATE_SOURCE) ;\n",
d751 1
a751 1
"for _i in [$(>[2-])]\n",
@


1.17
log
@@
text
@d4 1
@


1.16
log
@@
text
@d4 1
d56 1
d101 2
a102 1
"YACC		default = yacc -d ;\n",
d317 13
d434 1
a434 1
"if ! $(<:D)\n",
d436 1
a436 1
"MakeLocate $(<) $(<)($(s:BS)) : $(LOCATE_TARGET) ;\n",
d945 4
d1002 1
a1002 1
"$(YACC) $(>) &&\n",
d1103 4
d1154 4
d1185 1
a1185 1
"$(YACC) $(>)\n",
@


1.15
log
@@
text
@d17 1
a23 4
"if $(OS) = SUNOS && $(TZ)\n",
"{\n",
"Echo Warning: you are running the SunOS jam on Solaris. ;\n",
"}\n",
d38 19
d245 7
d255 3
a257 3
"DEPENDS all : shell files lib exe ;\n",
"DEPENDS all shell files lib exe : first ;\n",
"NOTFILE all first shell files lib exe dirs clean uninstall ;\n",
d274 1
d281 2
a282 1
"if $(VMS) && $(HDRS[1])\n",
d284 1
a284 1
"SLASHINC on $(<) = \"/inc=(\" $(HDRS[1]) ,$(HDRS[2-]) \")\" ;\n",
d289 1
d296 2
a297 1
"if $(VMS) && $(HDRS[1])\n",
d299 1
a299 1
"SLASHINC on $(<) = \"/inc=(\" $(HDRS[1]) ,$(HDRS[2-]) \")\" ;\n",
d410 6
d417 1
d466 2
a467 1
"if $(<:S)\n",
d469 2
a470 3
"t = $(<) ;\n",
"} else {\n",
"t = $(<:S=$(SUFEXE)) ;\n",
d474 1
a474 1
"MakeLocate $(t) $(<) : $(LOCATE_TARGET) ;\n",
d497 8
d572 1
d724 16
a739 1
"_s = $(>[1]) ;\n",
d745 1
a749 4
"if $(VMS)\n",
"{\n",
"_s = [$(_s)] ;\n",
"}\n",
d810 34
d846 1
a846 1
"if $(OS) = QNX\n",
d853 7
d876 1
a876 1
"$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>:S=.C)\n",
d879 1
a879 1
"else \n",
d883 7
d897 8
a904 1
"actions CcMv\n",
d1110 4
@


1.14
log
@@
text
@d11 1
d74 1
d84 1
d101 1
a149 1
"CRELIB		default = true ;\n",
d175 1
d216 1
d239 1
d295 6
a300 6
"INCLUDES $(<) : $(>) ;\n",
"SEARCH on $(>) = $(HDRSEARCH) ;\n",
"NOCARE $(>) ;\n",
"HDRSEARCH on $(>) = $(HDRSEARCH) ;\n",
"HDRSCAN on $(>) = $(HDRSCAN) ;\n",
"HDRRULE on $(>) = $(HDRRULE) ;\n",
d302 8
d404 1
a404 1
"if ! $(NOARSCAN) { RmTemps $(l) : $(s) ; }\n",
d488 1
d646 9
d874 2
a875 2
"$(MV) y.tab.c $(<[1])\n",
"$(MV) y.tab.h $(<[2])\n",
d923 2
a924 5
"$(AR) /out:$(<) $(<) $(>) \n",
"}\n",
"actions together quietly CreLib\n",
"{\n",
"if not exist $(<) $(AR) /out:$(<) $(>[1])\n",
d973 4
d1044 2
a1045 2
"$(MV) y.tab.c $(<[1])\n",
"$(MV) y.tab.h $(<[2])\n",
@


1.13
log
@@
text
@d3 1
d7 1
a7 1
"case DGUX :	RANLIB default = \"\" ;\n",
d16 1
d20 1
d124 1
a124 1
"C++FLAGS	default = $(CCLFAGS) ;\n",
d260 4
d298 1
a298 1
"local t ;\n",
d305 4
a308 1
"Install $(t) : $(>) ;\n",
d550 1
a550 1
"makeSubDir $(<[1]) : $(<[2-) ;\n",
d624 1
a629 1
"MakeLocate $(<) $(h) : $(LOCATE_SOURCE) ;\n",
d728 1
a728 1
"$(<[1]) = $(_r:R=$(l)) ;\n",
d751 10
d765 1
d823 1
a823 4
"if $(LINK) $(LINKFLAGS) -o $(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS) \n",
"then :\n",
"else $(RM) $(<) && exit 1\n",
"fi\n",
d865 1
a865 1
"$(LINK) -e$(<) $(LINKFLAGS) $(UNDEFS) -L$(LINKLIBS) $(NEEDLIBS) $(>) || $(RM) $(<)\n",
d1037 3
a1039 1
"include $(JAMFILE) ;\n",
@


1.12
log
@@
text
@d360 2
d363 1
@


1.11
log
@@
text
@d13 1
d67 2
d82 1
d92 3
a94 1
"RM		default = del/f/q ;\n",
d137 2
a138 1
"AR		default = lib /nologo ;\n",
d234 2
a235 1
"for _i in $(>)\n",
d237 1
a237 1
"File $(_i:D=$(<)) : $(_i) ;\n",
d289 1
a289 1
"rule Install\n",
d291 4
a294 2
"DEPENDS install : $(<) ;\n",
"DEPENDS $(<) : $(>) ;\n",
d296 3
a298 3
"DEPENDS $(<) : $(<:D) ;\n",
"MkDir $(<:D) ;\n",
"Clean uninstall : $(<) ;\n",
d301 3
a303 3
"Chmod $(<) ;\n",
"if $(OWNER) { Chown $(<) ; OWNER on $(<) = $(OWNER) ; }\n",
"if $(GROUP) { Chgrp $(<) ; GROUP on $(<) = $(GROUP) ; }\n",
d308 2
a309 5
"for _i in $(>)\n",
"{\n",
"Install $(_i:D=$(<)) : $(_i) ;\n",
"MODE on $(_i:D=$(<)) = $(EXEMODE) ;\n",
"}\n",
d313 2
a314 1
"InstallLib $(<) : $(>) ;\n",
d318 2
a319 5
"for _i in $(>)\n",
"{\n",
"Install $(_i:D=$(<)) : $(_i) ;\n",
"MODE on $(_i:D=$(<)) = $(FILEMODE) ;\n",
"}\n",
d323 2
a324 1
"for _i in $(>)\n",
d326 1
a326 1
"switch $(_i:S)\n",
d328 4
a331 4
"case .1 : _s = 1 ; case .2 : _s = 2 ; case .3 : _s = 3 ;\n",
"case .4 : _s = 4 ; case .5 : _s = 5 ; case .6 : _s = 6 ;\n",
"case .7 : _s = 7 ; case .8 : _s = 8 ; case .l : _s = l ;\n",
"case .n : _s = n ; case .man : _s = 1 ;\n",
d333 2
a334 3
"_d = $(_i:D=man$(_s):S=.$(_s)) ;\n",
"Install $(_d:R=$(<)) : $(_i) ;\n",
"MODE on $(_d:R=$(<)) = $(FILEMODE) ;\n",
d336 1
d340 2
a341 5
"for _i in $(>)\n",
"{\n",
"Install $(_i:D=$(<)) : $(_i) ;\n",
"MODE on $(_i:D=$(<)) = $(SHELLMODE) ;\n",
"}\n",
d346 1
a346 1
"LOCATE on $(<) = $(LOCATE_SOURCE) ;\n",
d356 5
a360 3
"makeGristedName _s : $(>) ;\n",
"_l = $(<:S=$(SUFLIB)) ;\n",
"DEPENDS lib : $(_l) ;\n",
d363 1
a363 1
"DEPENDS $(_l) : $(_s) ;\n",
d367 2
a368 2
"DEPENDS $(_l) : $(_l)($(_s:BS)) ;\n",
"for _i in $(_s)\n",
d370 1
a370 1
"DEPENDS $(_l)($(_i:BS)) : $(_i) ;\n",
d373 5
a377 5
"Clean clean : $(_l) ;\n",
"if $(CRELIB) { CreLib $(_l) : $(_s[1]) ; }\n",
"Archive $(_l) : $(_s) ;\n",
"if $(RANLIB) { Ranlib $(_l) ; }\n",
"if ! $(NOARSCAN) { RmTemps $(_l) : $(_s) ; }\n",
d386 1
d389 1
a389 1
"_t = $(<) ;\n",
d391 1
a391 1
"_t = $(<:S=$(SUFEXE)) ;\n",
d393 2
a394 2
"DEPENDS $(_t) : $(>:S=$(SUFLIB)) ;\n",
"NEEDLIBS on $(_t) += $(>:S=$(SUFLIB)) ;\n",
d403 2
a404 1
"makeGristedName _s : $(>) ;\n",
d407 1
a407 1
"_t = $(<) ;\n",
d409 1
a409 1
"_t = $(<:S=$(SUFEXE)) ;\n",
d411 13
a423 5
"DEPENDS exe : $(_t) ;\n",
"DEPENDS $(_t) : $(_s) ;\n",
"LOCATE on $(_t) = $(LOCATE_TARGET) ;\n",
"Clean clean : $(_t) ;\n",
"Link $(_t) : $(_s) ;\n",
d425 1
d430 1
d435 2
a436 2
"_s = $(<:D) ;\n",
"if $(_s) && $(_s) != $(<)\n",
d438 2
a439 3
"Depends $(<) : $(_s) ;\n",
"MkDir $(_s) ;\n",
"}\n",
a441 5
"rule MkDirFor\n",
"{\n",
"Depends $(<) : $(<:D) ;\n",
"NoUpdate $(<:D) ;\n",
"MkDir $(<:D) ;\n",
d445 1
d447 1
a447 6
"if $(LOCATE_TARGET)\n",
"{\n",
"LOCATE on $(<) = $(LOCATE_TARGET[1]) ;\n",
"DEPENDS $(<) : $(LOCATE_TARGET[1]) ;\n",
"MkDir $(LOCATE_TARGET[1]) ;\n",
"}\n",
d452 1
a452 1
"_h = $(SEARCH_SOURCE) ;\n",
d456 1
a456 1
"_h = \"\" ;\n",
d460 1
a460 1
"HDRSEARCH on $(>) = $(HDRS) $(SUBDIRHDRS) $(_h) $(STDHDRS) ;\n",
d463 1
d479 3
a481 2
"makeGristedName _s : $(<:S=$(SUFOBJ)) ;\n",
"CCFLAGS on $(_s) += $(>) ;\n",
d485 3
a487 2
"makeGristedName _s : $(<:S=$(SUFOBJ)) ;\n",
"C++FLAGS on $(_s) += $(>) ;\n",
d491 3
a493 2
"makeGristedName _s : $(<:S=$(SUFOBJ)) ;\n",
"HDRS on $(_s) += $(>) ;\n",
d497 3
a499 2
"makeGristedName _s : $(<) ;\n",
"for _i in $(_s)\n",
d501 1
a501 1
"Object $(_i:S=$(SUFOBJ)) : $(_i) ;\n",
d510 1
d513 1
a513 1
"_t = $(<) ;\n",
d515 1
a515 1
"_t = $(<:S=$(SUFEXE)) ;\n",
d517 1
a517 1
"MODE on $(_t) = 4711 ;\n",
d530 1
d542 2
a543 2
"_r = $($(<[1])RULES) ;\n",
"if ! $(_r)\n",
d545 1
a545 1
"_r = $(JAMRULES:R=$($(<[1]))) ;\n",
d547 1
a547 1
"include $(_r) ;\n",
d549 2
a550 2
"makeDirName _s : $(<[2-]) ;\n",
"SUBDIR = $(_s:R=$($(<[1]))) ;\n",
d574 1
d579 2
a580 2
"_s = $(<[2]) ;\n",
"for _i in $(<[3-])\n",
d582 1
a582 1
"_s = $(_s)$(SLASH)$(_i) ;\n",
d586 1
a586 1
"_s = [$(_s)] ;\n",
d588 1
a588 1
"include $(JAMFILE:D=$(_s):R=$($(<[1]))) ;\n",
d592 1
d595 1
a595 1
"_t = $(<) ;\n",
d597 1
a597 1
"_t = $(<:S=$(SUFEXE)) ;\n",
d599 1
a599 1
"UNDEFS on $(_t) += $(UNDEFFLAG)$(>) ;\n",
d607 2
a608 1
"_h = $(<:BS=.h) ;\n",
d611 3
a613 3
"DEPENDS $(<) $(_h) : $(>) ;\n",
"Yacc1 $(<) $(_h) : $(>) ;\n",
"Clean clean : $(<) $(_h) ;\n",
d615 2
a616 2
"INCLUDES $(<) : $(_h) ;\n",
"LOCATE on $(<) $(_h) = $(LOCATE_SOURCE) ;\n",
d620 1
d641 1
d666 1
d676 1
d706 8
a713 7
"l = $(<[2-]) ;\n",
"r = $(>) ;\n",
"makeCommon l : r ;\n",
"makeSubDir l : $(l) ;\n",
"makeDirName r : $(r) ;\n",
"if $(r) = $(DOT) {\n",
"$(<[1]) = $(l) ;\n",
d715 1
a715 1
"$(<[1]) = $(r:R=$(l)) ;\n",
d797 1
a797 1
"actions Link\n",
d842 1
a842 1
"actions Link\n",
d869 1
a869 1
"actions Link\n",
d884 4
d896 1
a896 1
"actions Link\n",
d915 1
a915 1
"actions Link\n",
d979 1
a979 1
"actions Link \n",
@


1.10
log
@@
text
@d133 1
a133 1
"CCFLAGS		default = /I$(MSVCNT)\\\\include ;\n",
d864 1
a864 1
"$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) $(>)\n",
d868 1
a868 1
"$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /Tp$(>)\n",
@


1.9
log
@@
text
@d133 1
a133 1
"CCFLAGS		default = /D \\\"NT\\\" ;\n",
@


1.8
log
@@
text
@d28 1
d30 1
d32 1
d155 1
d166 1
a166 1
"if ! $(watcom)\n",
d168 1
a168 1
"EXIT On OS2, set watcom to the root of the Watcom directory. ;\n",
d173 2
a174 2
"CCFLAGS		default = /zq /DOS2 /I$(watcom)\\\\h ; # zq=quiet\n",
"C++		default = $(CC) ;\n",
d181 1
a181 1
"STDHDRS		default = $(watcom)\\\\h ;\n",
d875 1
a875 1
"else if $(watcom)\n",
d877 1
a877 1
"actions updated together piecemeal Archive\n",
d887 1
a887 1
"$(C++) $(C++FLAGS) $(OPTIM) /Fo=$(<) /I$(HDRS) /Tp$(>)\n",
@


1.7
log
@@
text
@d1 1
a1 1
/* Generated from Jambase */
d9 1
a9 1
"		INSTALL default = \"\" ;\n",
d11 1
a11 1
"		INSTALL default = \"\" ;\n",
d15 6
a20 2
"		INSTALL default = \"install\" ;\n",
"		AR default = \"/usr/ccs/bin/ar ru\" ;\n",
d24 8
a31 40
"	AR		default = ar ru ;\n",
"	AS		default = as ;\n",
"	AWK		default = awk ;\n",
"	ASFLAGS		default = ;\n",
"	BINDIR		default = /usr/local/bin ;\n",
"	C++		default = gcc ;\n",
"	C++FLAGS	default = ;\n",
"	CC		default = cc ;\n",
"	CCFLAGS		default = ;\n",
"	CP		default = cp ;\n",
"	CHMOD		default = chmod ;\n",
"	DOT		default	= . ;\n",
"	DOTDOT		default	= .. ;\n",
"	EXEMODE		default = 711 ;\n",
"	FILEMODE	default = 644 ;\n",
"	FORTRAN		default = f77 ;\n",
"	FORTRANFLAGS	default = ;\n",
"	HDRS		default = ;\n",
"	INSTALL		default = install -c ;\n",
"	LEX		default = lex ;\n",
"	LIBDIR		default = /usr/local/lib ;\n",
"	LINK		default = $(CC) ;\n",
"	LINKFLAGS	default = $(CCFLAGS) ;\n",
"	LINKLIBS	default = ;\n",
"	LN		default = ln ;\n",
"	MANDIR		default = /usr/local/man ;\n",
"	MKDIR		default = mkdir ;\n",
"	MV		default = mv -f ;\n",
"	OPTIM		default = -O ;\n",
"	RANLIB		default = ranlib ;\n",
"	RM		default = rm -f ;\n",
"	SHELLHEADER	default = \"#!/bin/sh\" ;\n",
"	SHELLMODE	default = 755 ;\n",
"	SLASH		default = / ;\n",
"	STDHDRS		default = /usr/include ;\n",
"	SUFLIB		default = .a ;\n",
"	SUFOBJ		default = .o ;\n",
"	SUFEXE		default = \"\" ;\n",
"	UNDEFFLAG	default = \"-u _\" ;\n",
"	YACC		default = yacc -d ;\n",
d33 41
d76 103
a178 74
"	CHMOD		default = chmod ;\n",
"    	CP		default = copy ;\n",
"	DOT		default	= . ;\n",
"	DOTDOT		default	= .. ;\n",
"	EXEMODE		default = 711 ;\n",
"	FILEMODE	default = 644 ;\n",
"	MKDIR		default = mkdir ;\n",
"	MV		default = mv -f ;\n",
"	OS			= NT ;		# replace Windows_NT\n",
"    	RM		default = del/f/q ;\n",
"    	SLASH		default = \\\\ ;\n",
"    	SUFLIB		default = .lib ;\n",
"    	SUFOBJ		default = .obj ;\n",
"    	SUFEXE		default = .exe ;\n",
"     \n",
"    if $(BCCROOT)\n",
"    {\n",
"	ECHO \"Compiler is Borland C++\" ;\n",
"	AR		default = tlib ;\n",
"	ARFLAGS		default = /C /P64 ;\n",
"	CC		default = bcc32 ;\n",
"	CCFLAGS		default = -v -w-  ;\n",
"	C++		default = bcc32 ;\n",
"	C++FLAGS	default = -v -w- ;\n",
"	LINK		default = $(CC) ;\n",
"	LINKFLAGS	default = $(CCFLAGS) ;\n",
"	STDLIBPATH	default = $(BCCROOT)\\\\lib ;\n",
"	STDHDRS		default = $(BCCROOT)\\\\include ;\n",
"	NOLIBSCAN	default = true ;\n",
"    }\n",
"    else if $(MSVC)\n",
"    {\n",
"	ECHO \"Compiler is Microsoft Visual C++ 16 bit\" ;\n",
"	AR		default = lib /nologo ;\n",
"	CC		default = cl /nologo ;\n",
"	CCFLAGS		default = /D \\\"WIN\\\" ;\n",
"	C++		default = $(CC) ;\n",
"	C++FLAGS	default = $(CCLFAGS) ;\n",
"	LINK		default = $(CC) ;\n",
"	LINKFLAGS	default = $(CCFLAGS) ;\n",
"	LINKLIBS	default = \n",
"				$(MSVC)\\\\lib\\\\mlibce.lib\n",
"				$(MSVC)\\\\lib\\\\oldnames.lib\n",
"				;\n",
"	LINKLIBS	default = ;\n",
"	NOLIBSCAN	default = true ;\n",
"	OPTIM		default =  ;\n",
"	STDHDRS		default = $(MSVC)\\\\include ;\n",
"	UNDEFFLAG	default = \"/u _\" ;\n",
"    }\n",
"    else if $(MSVCNT)\n",
"    {\n",
"	ECHO \"Compiler is Microsoft Visual C++\" ;\n",
"	AR		default = lib /nologo ;\n",
"	CC		default = cl /nologo ;\n",
"	CCFLAGS		default = /D \\\"NT\\\" ;\n",
"	C++		default = $(CC) ;\n",
"	C++FLAGS	default = $(CCFLAGS) ;\n",
"	CRELIB		default = true ;\n",
"	LINK		default = link ;\n",
"	LINKFLAGS	default = ;\n",
"	LINKLIBS	default = $(MSVCNT)\\\\lib\\\\advapi32.lib\n",
"				$(MSVCNT)\\\\lib\\\\libc.lib\n",
"				$(MSVCNT)\\\\lib\\\\oldnames.lib\n",
"				$(MSVCNT)\\\\lib\\\\kernel32.lib ;\n",
"	OPTIM		default =  ;\n",
"	STDHDRS		default = $(MSVCNT)\\\\include ;\n",
"	UNDEFFLAG	default = \"/u _\" ;\n",
"    }\n",
"    else\n",
"    {\n",
"	EXIT On NT, set BCCROOT, MSVCNT, or MSVC to the root of the\n",
"		Borland or Microsoft directories. ;\n",
"    }\n",
d182 27
a208 27
"	AS		default = as ;\n",
"	CC		default = cc ;\n",
"	CCFLAGS		default = ;\n",
"	CRELIB		default = true ;\n",
"	DOT		default	= \"\" ;\n",
"	DOTDOT		default	= - ;\n",
"	EXEMODE		default = (w:e) ;\n",
"	FILEMODE	default = (w:r) ;\n",
"	HDRS		default = ;\n",
"	LEX		default = lex ;\n",
"	LINK		default = link ;\n",
"	LINKFLAGS	default = ;\n",
"	LINKLIBS	default = ;\n",
"	MV		default = rename ;\n",
"	OPTIM		default = ;\n",
"	RM		default = delete ;\n",
"	SHELLMODE	default = (w:er) ;\n",
"	SLASH		default = . ;\n",
"	STDHDRS		default = decc$library_include ;\n",
"	SUFLIB		default = .olb ;\n",
"	SUFOBJ		default = .obj ;\n",
"	SUFEXE		default = .exe ;\n",
"	switch $(OS) \n",
"	{\n",
"	case OPENVMS : CCFLAGS default = /stand=vaxc ;\n",
"	case VMS     : LINKLIBS default = sys$library:vaxcrtl.olb/lib ;\n",
"	}\n",
d219 1
a219 1
"	DEPENDS $(<) : $(>) ;\n",
d223 4
a226 4
"	for _i in $(>)\n",
"	{\n",
"	    File $(_i:D=$(<)) : $(_i) ;\n",
"	}\n",
d230 5
a234 10
"	DEPENDS $(<) : $(>) ;\n",
"	CCFLAGS on $(<) += $(CCFLAGS) $(SUBDIRCCFLAGS) ;\n",
"	if $(RELOCATE)\n",
"	{\n",
"	    CcMv $(<) : $(>) ;\n",
"	}\n",
"	if $(VMS) && $(HDRS[1])\n",
"	{\n",
"	    SLASHINC on $(<) = \"/inc=(\" $(HDRS[1]) ,$(HDRS[2-]) \")\" ;\n",
"	}\n",
d236 5
d243 6
a248 6
"	DEPENDS $(<) : $(>) ;\n",
"	C++FLAGS on $(<) += $(C++FLAGS) $(SUBDIRC++FLAGS) ;\n",
"	if $(VMS) && $(HDRS[1])\n",
"	{\n",
"	    SLASHINC on $(<) = \"/inc=(\" $(HDRS[1]) ,$(HDRS[2-]) \")\" ;\n",
"	}\n",
d252 5
a256 5
"	DEPENDS files : $(<) ;\n",
"	DEPENDS $(<) : $(>) ;\n",
"	SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"	MODE on $(<) = $(FILEMODE) ;\n",
"	Chmod $(<) ;\n",
d260 1
a260 1
"	DEPENDS $(<) : $(>) ;\n",
d264 3
a266 3
"	DEPENDS files : $(<) ;\n",
"	DEPENDS $(<) : $(>) ;\n",
"	SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
d270 6
a275 6
"	INCLUDES $(<) : $(>) ;\n",
"	SEARCH on $(>) = $(HDRSEARCH) ;\n",
"	NOCARE $(>) ;\n",
"	HDRSEARCH on $(>) = $(HDRSEARCH) ;\n",
"	HDRSCAN on $(>) = $(HDRSCAN) ;\n",
"	HDRRULE on $(>) = $(HDRRULE) ;\n",
d279 12
a290 12
"	DEPENDS install : $(<) ;\n",
"	DEPENDS $(<) : $(>) ;\n",
"	SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"	DEPENDS $(<) : $(<:D) ;\n",
"	MkDir $(<:D) ;\n",
"	Clean uninstall : $(<) ;\n",
"	if ! $(INSTALL)\n",
"	{\n",
"	    Chmod $(<) ;\n",
"	    if $(OWNER) { Chown $(<) ; OWNER on $(<) = $(OWNER) ; }\n",
"	    if $(GROUP) { Chgrp $(<) ; GROUP on $(<) = $(GROUP) ; }\n",
"	}\n",
d294 4
a297 5
"	for _i in $(>)\n",
"	{\n",
"	    Install $(_i:D=$(<)) : $(_i) ;\n",
"	    MODE on $(_i:D=$(<)) = $(EXEMODE) ;\n",
"	}\n",
d299 1
d302 1
a302 1
"	InstallLib $(<) : $(>) ;\n",
d306 4
a309 5
"	for _i in $(>)\n",
"	{\n",
"	    Install $(_i:D=$(<)) : $(_i) ;\n",
"	    MODE on $(_i:D=$(<)) = $(FILEMODE) ;\n",
"	}\n",
d311 1
d314 13
a326 13
"	for _i in $(>)\n",
"	{\n",
"	    switch $(_i:S)\n",
"	    {\n",
"	    case .1 : _s = 1 ; case .2 : _s = 2 ; case .3 : _s = 3 ;\n",
"	    case .4 : _s = 4 ; case .5 : _s = 5 ; case .6 : _s = 6 ;\n",
"	    case .7 : _s = 7 ; case .8 : _s = 8 ; case .l : _s = l ;\n",
"	    case .n : _s = n ; case .man : _s = 1 ;\n",
"	    }\n",
"	    _d = $(_i:D=man$(_s):S=.$(_s)) ;\n",
"	    Install $(_d:R=$(<)) : $(_i) ;\n",
"	    MODE on $(_d:R=$(<)) = $(FILEMODE) ;\n",
"	}\n",
d330 4
a333 5
"	for _i in $(>)\n",
"	{\n",
"	    Install $(_i:D=$(<)) : $(_i) ;\n",
"	    MODE on $(_i:D=$(<)) = $(SHELLMODE) ;\n",
"	}\n",
d335 1
d338 3
a340 3
"	DEPENDS $(<) : $(>) ;\n",
"	LOCATE on $(<) = $(LOCATE_SOURCE) ;\n",
"	Clean clean : $(<) ;\n",
d344 2
a345 2
"	LibraryFromObjects $(<) : $(>:S=$(SUFOBJ)) ;\n",
"	Objects $(>) ;\n",
d349 6
a354 20
"	makeGristedName _s : $(>) ;\n",
"	_l = $(<:S=$(SUFLIB)) ;\n",
"	DEPENDS lib : $(_l) ;\n",
"	if $(NOLIBSCAN) \n",
"	{ \n",
"	    DEPENDS $(_l) : $(_s) ;\n",
"	}\n",
"	else\n",
"	{\n",
"	    DEPENDS $(_l) : $(_l)($(_s:BS)) ;\n",
"	    for _i in $(_s)\n",
"	    {\n",
"		DEPENDS $(_l)($(_i:BS)) : $(_i) ;\n",
"	    }\n",
"	}\n",
"	Clean clean : $(_l) ;\n",
"	if $(CRELIB) { CreLib $(_l) : $(_s[1]) ; }\n",
"	Archive $(_l) : $(_s) ;\n",
"	RmTemps $(_l) : $(_s) ;\n",
"	if $(RANLIB) { Ranlib $(_l) ; }\n",
d356 14
d372 2
a373 2
"	MODE on $(<) = $(EXEMODE) ;\n",
"	Chmod $(<) ;\n",
d377 8
a384 8
"	if $(<:S)\n",
"	{\n",
"	    _t = $(<) ;\n",
"	} else {\n",
"	    _t = $(<:S=$(SUFEXE)) ;\n",
"	}\n",
"	DEPENDS $(_t) : $(>:S=$(SUFLIB)) ;\n",
"	NEEDLIBS on $(_t) += $(>:S=$(SUFLIB)) ;\n",
d388 2
a389 2
"	MainFromObjects $(<) : $(>:S=$(SUFOBJ)) ;\n",
"	Objects $(>) ;\n",
d393 12
a404 12
"	makeGristedName _s : $(>) ;\n",
"	if $(<:S)\n",
"	{\n",
"	    _t = $(<) ;\n",
"	} else {\n",
"	    _t = $(<:S=$(SUFEXE)) ;\n",
"	}\n",
"	DEPENDS exe : $(_t) ;\n",
"	DEPENDS $(_t) : $(_s) ;\n",
"	LOCATE on $(_t) = $(LOCATE_TARGET) ;\n",
"	Clean clean : $(_t) ;\n",
"	Link $(_t) : $(_s) ;\n",
d408 13
a420 13
"	if $(<) != $(DOT) && ! $($(<)-mkdir) \n",
"	{\n",
"	    $(<)-mkdir = true ;\n",
"	    MkDir1 $(<) ;\n",
"	    NOUPDATE $(<) ;\n",
"	    Depends dirs : $(<) ;\n",
"	    _s = $(<:D) ;\n",
"	    if $(_s) && $(_s) != $(<)\n",
"	    {\n",
"		Depends $(<) : $(_s) ;\n",
"		MkDir $(_s) ;\n",
"	    }\n",
"	}\n",
d424 3
a426 3
"	Depends $(<) : $(<:D) ;\n",
"	NoUpdate $(<:D) ;\n",
"	MkDir $(<:D) ;\n",
d430 16
a445 34
"	Clean clean : $(<) ;\n",
"	if $(LOCATE_TARGET)\n",
"	{\n",
"	    LOCATE on $(<) = $(LOCATE_TARGET[1]) ;\n",
"	    DEPENDS $(<) : $(LOCATE_TARGET[1]) ;\n",
"	    MkDir $(LOCATE_TARGET[1]) ;\n",
"	}\n",
"	SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"	HDRS on $(<) = $(HDRS) $(SUBDIRHDRS) $(SEARCH_SOURCE) ;\n",
"	if $(SEARCH_SOURCE)\n",
"	{\n",
"	    _h = $(SEARCH_SOURCE) ;\n",
"	}\n",
"	else\n",
"	{\n",
"	    _h = \"\" ;\n",
"	}\n",
"	HDRRULE on $(>) = HdrRule ;\n",
"	HDRSCAN on $(>) = $(HDRPATTERN) ;\n",
"	HDRSEARCH on $(>) = $(HDRS) $(SUBDIRHDRS) $(_h) $(STDHDRS) ;\n",
"	switch $(>:S)\n",
"	{\n",
"	    case .c :	Cc $(<) : $(>) ;\n",
"	    case .C :	C++ $(<) : $(>) ;\n",
"	    case .cc :	C++ $(<) : $(>) ;\n",
"	    case .cpp : C++ $(<) : $(>) ;\n",
"	    case .f :	Fortran $(<) : $(>) ;\n",
"	    case .l :	Cc $(<) : $(<:S=.c) ;\n",
"			Lex $(<:S=.c) : $(>) ;\n",
"	    case .s :	As $(<) : $(>) ;\n",
"	    case .y :	Cc $(<) : $(<:S=.c) ;\n",
"			Yacc $(<:S=.c) : $(>) ;\n",
"	    case * :	UserObject $(<) : $(>) ;\n",
"	}\n",
d447 18
d467 2
a468 2
"	makeGristedName _s : $(<:S=$(SUFOBJ)) ;\n",
"	CCFLAGS on $(_s) += $(>) ;\n",
d472 2
a473 2
"	makeGristedName _s : $(<:S=$(SUFOBJ)) ;\n",
"	C++FLAGS on $(_s) += $(>) ;\n",
d477 2
a478 2
"	makeGristedName _s : $(<:S=$(SUFOBJ)) ;\n",
"	HDRS on $(_s) += $(>) ;\n",
d482 4
a485 5
"	makeGristedName _s : $(<) ;\n",
"	for _i in $(_s)\n",
"	{\n",
"		Object $(_i:S=$(SUFOBJ)) : $(_i) ;\n",
"	}\n",
d487 1
d490 1
a490 1
"	TEMPORARY $(>) ;\n",
d494 5
a498 7
"	if $(<:S)\n",
"	{\n",
"	    _t = $(<) ;\n",
"	} else {\n",
"	    _t = $(<:S=$(SUFEXE)) ;\n",
"	}\n",
"	MODE on $(_t) = 4711 ;\n",
d500 2
d504 6
a509 6
"	DEPENDS shell : $(<) ;\n",
"	DEPENDS $(<) : $(>) ;\n",
"	SEARCH on $(>) = $(SEARCH_SOURCE) ;\n",
"	MODE on $(<) = $(SHELLMODE) ;\n",
"	Clean clean : $(<) ;\n",
"	Chmod $(<) ;\n",
d513 28
a540 28
"	if ! $($(<[1]))\n",
"	{\n",
"	    if ! $(<[1])\n",
"	    {\n",
"		EXIT SubDir syntax error ;\n",
"	    }\n",
"	    makeSubDir $(<[1]) : $(<[2-) ;\n",
"	}\n",
"	if ! $($(<[1])-included)\n",
"	{\n",
"	    $(<[1])-included = TRUE ;\n",
"	    _r = $($(<[1])RULES) ;\n",
"	    if ! $(_r)\n",
"	    {\n",
"		_r = $(JAMRULES:R=$($(<[1]))) ;\n",
"	    }\n",
"	    include $(_r) ;\n",
"	}\n",
"	makeDirName _s : $(<[2-]) ;\n",
"	SUBDIR = $(_s:R=$($(<[1]))) ;\n",
"\t SUBDIR_TOKENS = $(<[2-]) ;\n",
"	SEARCH_SOURCE = $(SUBDIR) ;\n",
"	LOCATE_SOURCE = $(ALL_LOCATE_TARGET) $(SUBDIR) ;\n",
"	LOCATE_TARGET = $(ALL_LOCATE_TARGET) $(SUBDIR) ;\n",
"	makeGrist SOURCE_GRIST : $(<[2-]) ;\n",
"	SUBDIRCCFLAGS = ;\n",
"	SUBDIRC++FLAGS = ;\n",
"	SUBDIRHDRS = ;\n",
d544 1
a544 1
"	SUBDIRCCFLAGS += $(<) ;\n",
d548 1
a548 1
"	SUBDIRC++FLAGS += $(<) ;\n",
d552 1
a552 1
"	SUBDIRHDRS += $(<) ;\n",
d556 14
a569 14
"	if ! $($(<[1]))\n",
"	{\n",
"	    EXIT Top level of source tree has not been set with $(<[1]) ;\n",
"	}\n",
"	_s = $(<[2]) ;\n",
"	for _i in $(<[3-])\n",
"	{\n",
"	    _s = $(_s)$(SLASH)$(_i) ;\n",
"	}\n",
"	if $(VMS)\n",
"	{\n",
"	    _s = [$(_s)] ;\n",
"	}\n",
"	include $(JAMFILE:D=$(_s):R=$($(<[1]))) ;\n",
d573 5
a577 7
"	if $(<:S)\n",
"	{\n",
"	    _t = $(<) ;\n",
"	} else {\n",
"	    _t = $(<:S=$(SUFEXE)) ;\n",
"	}\n",
"	UNDEFS on $(_t) += $(UNDEFFLAG)$(>) ;\n",
d579 2
d583 1
a583 1
"	EXIT \"Unknown suffix on\" $(>) \"- see UserObject rule in Jamfile(5).\" ;\n",
d587 6
a592 9
"	_h = $(<:BS=.h) ;\n",
"	if $(YACC)\n",
"	{\n",
"	    DEPENDS $(<) $(_h) : $(>) ;\n",
"	    Yacc1 $(<) $(_h) : $(>) ;\n",
"	    Clean clean : $(<) $(_h) ;\n",
"	}\n",
"	INCLUDES $(<) : $(_h) ;\n",
"	LOCATE on $(<) $(_h) = $(LOCATE_SOURCE) ;\n",
d594 3
d599 15
a613 17
"	if ! $(>[1]) \n",
"	{\n",
"	    _d = $(DOT) ;\n",
"	} \n",
"	else\n",
"	{\n",
"	    _d = $(DOTDOT) ;\n",
"	    for _i in $(>[2-])\n",
"	    {\n",
"		_d = $(_d)$(SLASH)$(DOTDOT) ;\n",
"	    }\n",
"	}\n",
"	if $(VMS)\n",
"	{\n",
"	    _d = [$(_d)] ;\n",
"	}\n",
"	$(<) = $(_d) ;\n",
d615 2
d619 17
a635 17
"	if $(>)\n",
"	{\n",
"	    _s = $(>[1]) ;\n",
"	    for _i in $(>[2-])\n",
"	    {\n",
"		_s = $(_s)$(SLASH)$(_i) ;\n",
"	    }\n",
"	}\n",
"	else\n",
"	{\n",
"	    _s = $(DOT) ;\n",
"	}\n",
"	if $(VMS)\n",
"	{\n",
"	    _s = [$(_s)] ;\n",
"	}\n",
"	$(<) += $(_s) ;\n",
d639 1
a639 1
"	$(<) = ; addDirName $(<) : $(>) ;\n",
d643 4
a646 6
"	_g = $(>[1]) ;\n",
"	for _i in $(>[2-])\n",
"	{\n",
"	    _g = $(_g)!$(_i) ;\n",
"	}\n",
"	$(<) = $(_g) ;\n",
d648 2
d652 13
a664 17
"	if ! $(SOURCE_GRIST)\n",
"	{\n",
"	    $(<) = $(>) ;\n",
"	}\n",
"	else \n",
"	{\n",
"	    _o = ;\n",
"	    for _i in $(>)\n",
"	    {\n",
"		switch $(_i)\n",
"		{\n",
"		case *.h :	_o += $(_i) ;\n",
"		case * : 	_o += $(_i:G=$(SOURCE_GRIST)) ;\n",
"		}\n",
"	    }\n",
"	    $(<) = $(_o) ;\n",
"	}\n",
d666 4
d672 5
a676 6
"	if $($(<)[1]) && $($(<)[1]) = $($(>)[1])\n",
"	{\n",
"	    $(<) = $($(<)[2-]) ;\n",
"	    $(>) = $($(>)[2-]) ;\n",
"	    makeCommon $(<) : $(>) ;\n",
"	}\n",
d678 1
d681 10
a690 10
"	l = $(<[2-]) ;\n",
"	r = $(>) ;\n",
"	makeCommon l : r ;\n",
"	makeSubDir l : $(l) ;\n",
"	makeDirName r : $(r) ;\n",
"	if $(r) = $(DOT) {\n",
"	    $(<[1]) = $(l) ;\n",
"	} else {\n",
"	    $(<[1]) = $(r:R=$(l)) ;\n",
"	}\n",
d694 5
a698 103
"    actions updated together piecemeal Archive\n",
"    {\n",
"	$(AR) $(<) $(>)\n",
"    }\n",
"    actions As\n",
"    {\n",
"	$(AS) $(ASFLAGS) -I$(HDRS) -o $(<) $(>)\n",
"    }\n",
"    actions C++\n",
"    {\n",
"	$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>)\n",
"    }\n",
"    actions Cc\n",
"    {\n",
"	$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>)\n",
"    }\n",
"    actions CcMv\n",
"    {\n",
"	[ $(<) != $(>:BS=$(SUFOBJ)) ] && $(MV) $(>:BS=$(SUFOBJ)) $(<)\n",
"    }\n",
"    actions Chgrp\n",
"    {\n",
"	chgrp $(GROUP) $(<)\n",
"    }\n",
"    actions Chmod\n",
"    {\n",
"	chmod $(MODE) $(<)\n",
"    }\n",
"    actions Chown\n",
"    {\n",
"	chown $(OWNER) $(<)\n",
"    }\n",
"    actions piecemeal together existing Clean\n",
"    {\n",
"	$(RM) $(>)\n",
"    }\n",
"    actions File\n",
"    {\n",
"	$(RM) $(<)\n",
"	$(CP) $(>) $(<)\n",
"    }\n",
"    actions Fortran\n",
"    {\n",
"	$(FORTRAN) $(FORTRANFLAGS) -o $(<) $(>)\n",
"    }\n",
"    actions HardLink\n",
"    {\n",
"	$(RM) $(<) && $(LN) $(>) $(<)\n",
"    }\n",
"    if $(INSTALL)\n",
"    {\n",
"	actions Install\n",
"	{\n",
"	$(INSTALL) -m$(MODE) -o$(OWNER) -g$(GROUP) $(>) $(<)\n",
"	}\n",
"    }\n",
"    else\n",
"    {\n",
"	actions Install\n",
"	{\n",
"	$(CP) $(>) $(<) \n",
"	}\n",
"    }\n",
"    actions Lex\n",
"    {\n",
"	$(LEX) $(>) && $(MV) lex.yy.c $(<)\n",
"    }\n",
"    actions Link\n",
"    {\n",
"	if $(LINK) $(LINKFLAGS) -o $(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS) \n",
"	then :\n",
"	else $(RM) $(<) && exit 1\n",
"	fi\n",
"    }\n",
"    actions MkDir1\n",
"    {\n",
"	$(MKDIR) $(<)\n",
"    }\n",
"    actions together Ranlib\n",
"    {\n",
"	$(RANLIB) $(<)\n",
"    }\n",
"    actions quietly updated piecemeal together RmTemps\n",
"    {\n",
"	$(RM) $(>)\n",
"    }\n",
"    actions Shell\n",
"    {\n",
"	$(AWK) '\n",
"		NR == 1 { print \"$(SHELLHEADER)\" }\n",
"		NR == 1 && /^[#:]/ { next }\n",
"		/^##/ { next }\n",
"		{ print }\n",
"	' < $(>) > $(<)\n",
"    }\n",
"    actions Yacc1\n",
"    {\n",
"	$(YACC) $(>) &&\n",
"	{\n",
"	    $(MV) y.tab.c $(<[1])\n",
"	    $(MV) y.tab.h $(<[2])\n",
"	}\n",
"    }\n",
d700 2
a701 1
"else if $(NT)\n",
d703 36
a738 84
"    if $(BCCROOT)\n",
"    {\n",
"	actions C++\n",
"	{\n",
"	$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o$(<) $(>)\n",
"	}\n",
"	actions Link\n",
"	{\n",
"	$(LINK) -e$(<) $(LINKFLAGS) $(UNDEFS) -L$(LINKLIBS) $(NEEDLIBS) $(>) || $(RM) $(<)\n",
"	}\n",
"	actions updated together piecemeal Archive\n",
"	{\n",
"	$(AR) $(ARFLAGS) $(<) -+$(>)\n",
"	}\n",
"	actions Cc\n",
"	{\n",
"	$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) -o$(<) $(>)\n",
"\t }\n",
"    }\n",
"    else if $(MSVC) \n",
"    {\n",
"	actions updated together piecemeal Archive\n",
"	{\n",
"	$(AR) $(<) -+$(>) ;\n",
"	}\n",
"	actions Cc\n",
"	{\n",
"	$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) $(>)\n",
"	}\n",
"	actions C++\n",
"	{\n",
"	$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /Tp$(>)\n",
"	}\n",
"	actions Link\n",
"	{\n",
"	$(LINK) $(LINKFLAGS) /out:$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)\n",
"	}\n",
"    }\n",
"    else if $(MSVCNT)\n",
"    {\n",
"	actions updated together piecemeal Archive\n",
"	{\n",
"	$(AR) /out:$(<) $(<) $(>) \n",
"	}\n",
"	actions together quietly CreLib\n",
"	{\n",
"	if not exist $(<) $(AR) /out:$(<) $(>[1])\n",
"	}\n",
"	actions Cc\n",
"	{\n",
"	$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) $(>)\n",
"	}\n",
"	actions C++\n",
"	{\n",
"	$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /Tp$(>)\n",
"	}\n",
"	actions Link\n",
"	{\n",
"	$(LINK) $(LINKFLAGS) /out:$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)\n",
"	}\n",
"    }\n",
"    actions Chmod\n",
"    {\n",
"    }\n",
"    actions piecemeal together existing Clean\n",
"    {\n",
"	$(RM) $(>)\n",
"    }\n",
"    actions File\n",
"    {\n",
"	copy $(>) $(<)\n",
"    }\n",
"    actions MkDir1\n",
"    {\n",
"	$(MKDIR) $(<)\n",
"    }\n",
"    actions quietly updated piecemeal together RmTemps\n",
"    {\n",
"	$(RM) $(>)\n",
"    }\n",
"    actions Shell\n",
"    {\n",
"	copy $(>) $(<)\n",
"    }\n",
d740 174
d916 7
a922 55
"    actions updated together piecemeal Archive \n",
"    {\n",
"	lib/replace $(<) $(>[1]) ,$(>[2-])\n",
"    }\n",
"    actions Cc\n",
"    { \n",
"	cc/obj=$(<) $(CCFLAGS) $(OPTIM) $(SLASHINC) $(>) \n",
"    }\n",
"    actions Chmod\n",
"    {\n",
"	set file/prot=$(MODE) $(<)\n",
"    }\n",
"    actions piecemeal together existing Clean\n",
"    {\n",
"	$(RM) $(>[1]);* ,$(>[2-]);*\n",
"    }\n",
"    actions together quietly CreLib\n",
"    {\n",
"\tif f$search(\"$(<)\") .eqs. \"\" then lib/create $(<)\n",
"    }\n",
"    actions File\n",
"    {\n",
"	copy $(>) $(<)\n",
"    }\n",
"    actions Install\n",
"    {\n",
"	copy $(>) $(<)\n",
"    }\n",
"    actions Lex\n",
"    {\n",
"	$(LEX) $(>) \n",
"	$(MV) lex.yy.c $(<)\n",
"    }\n",
"    actions Link \n",
"    {\n",
"	$(LINK)/exe=$(<) $(LINKFLAGS) $(>[1]) ,$(>[2-]) ,$(NEEDLIBS)/lib ,$(LINKLIBS)\n",
"    }\n",
"    actions MkDir1\n",
"    {\n",
"	create/dir $(<)\n",
"    }\n",
"    actions quietly updated piecemeal together RmTemps\n",
"    {\n",
"	$(RM) $(>[1]);* ,$(>[2-]);*\n",
"    }\n",
"    actions Shell\n",
"    {\n",
"	copy $(>) $(<)\n",
"    }\n",
"    actions Yacc1\n",
"    {\n",
"	$(YACC) $(>)\n",
"	$(MV) y.tab.c $(<[1])\n",
"	$(MV) y.tab.h $(<[2])\n",
"    }\n",
d924 48
d987 1
a987 1
0};
@


1.6
log
@@
text
@d63 1
d67 2
d70 1
a70 1
"    	MV		default = move ;\n",
@


1.5
log
@@
text
@d363 1
a363 1
"	if ! $($(<)-mkdir) \n",
d388 3
a390 3
"	    LOCATE on $(<) = $(LOCATE_TARGET) ;\n",
"	    DEPENDS $(<) : $(LOCATE_TARGET) ;\n",
"	    MkDir $(LOCATE_TARGET) ;\n",
d393 1
a393 1
"	HDRS on $(<) = $(SEARCH_SOURCE) $(HDRS) $(SUBDIRHDRS) ;\n",
@


1.3
log
@@
text
@d386 6
a391 1
"	LOCATE on $(<) = $(LOCATE_TARGET) ;\n",
d393 1
a393 1
"	HDRS on $(<) = $(HDRS) $(SUBDIRHDRS) $(SEARCH_SOURCE) ;\n",
d655 1
a655 1
"	$(AS) $(ASFLAGS) -o $(<) $(>) ;\n",
@


1.2
log
@@
text
@d567 1
a567 1
"rule makeDirName\n",
d585 5
a589 1
"	$(<) = $(_s) ;\n",
@


1.1
log
@@
text
@d598 1
a598 1
"	if $(SOURCE_GRIST)\n",
d600 1
a600 1
"	    $(<) = $(>:G=$(SOURCE_GRIST)) ;\n",
d602 1
a602 1
"	else\n",
d604 10
a613 1
"	    $(<) = $(>) ;\n",
@
