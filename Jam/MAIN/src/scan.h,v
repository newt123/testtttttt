head     1.12;
access   ;
symbols  ;
locks    ;comment  @@;


1.12
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.11;

1.11
date     2005.01.27.09.35.32;  author p4;  state Exp;
branches ;
next     1.10;

1.10
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.9;

1.9
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.8;

1.8
date     2005.01.27.09.35.27;  author p4;  state Exp;
branches ;
next     1.7;

1.7
date     2005.01.27.09.35.26;  author p4;  state Exp;
branches ;
next     1.6;

1.6
date     2005.01.27.09.35.24;  author p4;  state Exp;
branches ;
next     1.5;

1.5
date     2005.01.27.09.35.24;  author p4;  state Exp;
branches ;
next     1.4;

1.4
date     2005.01.27.09.35.22;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.18;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.14;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.12;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.12
log
@@
text
@/*
 * Copyright 1993, 1995 Christopher Seiwald.
 *
 * This file is part of Jam - see jam.c for Copyright information.
 */

/*
 * scan.h - the jam yacc scanner
 *
 * External functions:
 *
 *	yyerror( char *s ) - print a parsing error message
 *	yyfparse( char *s ) - scan include file s
 *	yylex() - parse the next token, returning its type
 *	yymode() - adjust lexicon of scanner
 *	yyparse() - declaration for yacc parser
 *	yyanyerrors() - indicate if any parsing errors occured
 *
 * The yymode() function is for the parser to adjust the lexicon of the
 * scanner.  Aside from normal keyword scanning, there is a mode to
 * handle action strings (look only for the closing }) and a mode to 
 * ignore most keywords when looking for a punctuation keyword.  This 
 * allows non-punctuation keywords to be used in lists without quoting.
 */

/*
 * YYSTYPE - value of a lexical token
 */

# define YYSTYPE YYSYMBOL

typedef struct _YYSTYPE {
	int		type;
	char		*string;
	PARSE		*parse;
	LIST		*list;
	int		number;
} YYSTYPE;

extern YYSTYPE yylval;

void yyerror();
void yyfparse();
int yylex();
void yymode();
int yyparse();
int yyanyerrors();

# define SCAN_NORMAL	0	/* normal parsing */
# define SCAN_STRING	1	/* look only for matching } */
# define SCAN_PUNCT	2	/* only punctuation keywords */
@


1.11
log
@@
text
@a42 1
void yyiparse();
@


1.10
log
@@
text
@d17 1
a17 1
 *	yyanyerror() - indicate if any parsing errors occured
d48 1
a48 1
int yyanyerror();
@


1.9
log
@@
text
@d42 1
a42 1
int yyerror();
@


1.8
log
@@
text
@d17 1
d48 1
@


1.7
log
@@
text
@d13 1
a13 2
 *	yyiparse( char *name, char **s ) - tell scanner to parse s
 *	yyfparse( char *s ) - tell the scanner to include file s
@


1.6
log
@@
text
@d13 1
d43 1
@


1.5
log
@@
text
@d9 14
d26 1
a26 1
 * needed by parser, scanner
d44 1
a44 1
void yymode();	/* adjust lexicon of scanner */
@


1.4
log
@@
text
@d28 1
a28 1
int yyfparse();
@


1.3
log
@@
text
@d27 3
d31 1
@


1.2
log
@@
text
@d27 5
a31 1
extern int scan_asstring;
@


1.1
log
@@
text
@d2 3
a4 1
 * Copyright 1993 Christopher Seiwald.
@
