head     1.21;
access   ;
symbols  ;
locks    ;comment  @@;


1.21
date     2005.01.27.09.35.33;  author p4;  state Exp;
branches ;
next     1.20;

1.20
date     2005.01.27.09.35.33;  author p4;  state Exp;
branches ;
next     1.19;

1.19
date     2005.01.27.09.35.32;  author p4;  state Exp;
branches ;
next     1.18;

1.18
date     2005.01.27.09.35.32;  author p4;  state Exp;
branches ;
next     1.17;

1.17
date     2005.01.27.09.35.31;  author p4;  state Exp;
branches ;
next     1.16;

1.16
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.15;

1.15
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.14;

1.14
date     2005.01.27.09.35.24;  author p4;  state Exp;
branches ;
next     1.13;

1.13
date     2005.01.27.09.35.23;  author p4;  state Exp;
branches ;
next     1.12;

1.12
date     2005.01.27.09.35.21;  author p4;  state Exp;
branches ;
next     1.11;

1.11
date     2005.01.27.09.35.19;  author p4;  state Exp;
branches ;
next     1.10;

1.10
date     2005.01.27.09.35.18;  author p4;  state Exp;
branches ;
next     1.9;

1.9
date     2005.01.27.09.35.18;  author p4;  state Exp;
branches ;
next     1.8;

1.8
date     2005.01.27.09.35.16;  author p4;  state Exp;
branches ;
next     1.7;

1.7
date     2005.01.27.09.35.15;  author p4;  state Exp;
branches ;
next     1.6;

1.6
date     2005.01.27.09.35.15;  author p4;  state Exp;
branches ;
next     1.5;

1.5
date     2005.01.27.09.35.15;  author p4;  state Exp;
branches ;
next     1.4;

1.4
date     2005.01.27.09.35.14;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.13;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.13;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.12;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.21
log
@@
text
@/*
 * Copyright 1993, 1995 Christopher Seiwald.
 *
 * This file is part of Jam - see jam.c for Copyright information.
 */

/*
 * make.c - bring a target up to date, once rules are in place
 *
 * This modules controls the execution of rules to bring a target and
 * its dependencies up to date.  It is invoked after the targets, rules,
 * et. al. described in rules.h are created by the interpreting of the
 * jam files.
 *
 * This file contains the main make() entry point and the first pass
 * make0().  The second pass, make1(), which actually does the command
 * execution, is in make1.c.
 *
 * External routines:
 *	make() - make a target, given its name
 *
 * Internal routines:
 * 	make0() - bind and scan everything to make a TARGET
 *
 * 12/26/93 (seiwald) - allow NOTIME targets to be expanded via $(<), $(>)
 * 01/04/94 (seiwald) - print all targets, bounded, when tracing commands
 * 04/08/94 (seiwald) - progress report now reflects only targets with actions
 * 04/11/94 (seiwald) - Combined deps & headers into deps[2] in TARGET.
 * 12/20/94 (seiwald) - NOTIME renamed NOTFILE.
 * 12/20/94 (seiwald) - make0() headers after determining fate of target, so 
 *			that headers aren't seen as dependents on themselves.
 * 01/19/95 (seiwald) - distinguish between CANTFIND/CANTMAKE targets.
 * 02/02/95 (seiwald) - propagate leaf source time for new LEAVES rule.
 * 02/14/95 (seiwald) - NOUPDATE rule means don't update existing target.
 * 08/22/95 (seiwald) - NOUPDATE targets immune to anyhow (-a) flag.
 */

# include "jam.h"

# include "lists.h"
# include "parse.h"
# include "variable.h"
# include "rules.h"

# include "search.h"
# include "newstr.h"
# include "make.h"
# include "headers.h"
# include "command.h"

static void make0();

# ifndef max
# define max( a,b ) ((a)>(b)?(a):(b))
# endif

typedef struct {
	int	temp;
	int	updating;
	int	cantfind;
	int	cantmake;
	int	targets;
	int	made;
} COUNTS ;

static char *target_fate[] = 
{
	"init",		/* T_FATE_INIT */
	"making", 	/* T_FATE_MAKING */
	"stable", 	/* T_FATE_STABLE */
	"newer",	/* T_FATE_NEWER */
	"temp", 	/* T_FATE_ISTMP */
	"touched", 	/* T_FATE_TOUCHED */
	"missing", 	/* T_FATE_MISSING */
	"old", 		/* T_FATE_OUTDATED */
	"update", 	/* T_FATE_UPDATE */
	"nofind", 	/* T_FATE_CANTFIND */
	"nomake" 	/* T_FATE_CANTMAKE */
} ;

static char *target_bind[] = 
{
	"unbound",
	"missing",
	"parents",
	"exists",
} ;

# define spaces(x) ( "                " + 16 - ( x > 16 ? 16 : x ) )

/*
 * make() - make a target, given its name
 */

int
make( n_targets, targets, anyhow )
int	n_targets;
char	**targets;
int	anyhow;
{
	int i;
	COUNTS counts[1];
	int status = 0;		/* 1 if anything fails */

	memset( (char *)counts, 0, sizeof( *counts ) );

	for( i = 0; i < n_targets; i++ )
	{
	    TARGET *t = bindtarget( targets[i] );

	    make0( t, T_BIND_UNBOUND, (time_t)0, 0, counts, anyhow );
	}

	if( DEBUG_MAKE )
	{
	    if( counts->targets )
		printf( "...found %d target(s)...\n", counts->targets );
	    if( counts->temp )
		printf( "...using %d temp target(s)...\n", counts->temp );
	    if( counts->updating )
		printf( "...updating %d target(s)...\n", counts->updating );
	    if( counts->cantfind )
		printf( "...can't find %d target(s)...\n", counts->cantfind );
	    if( counts->cantmake )
		printf( "...can't make %d target(s)...\n", counts->cantmake );
	}

	status = counts->cantfind || counts->cantmake;

	for( i = 0; i < n_targets; i++ )
	    status |= make1( bindtarget( targets[i] ) );

	return status;
}

/*
 * make0() - bind and scan everything to make a TARGET
 *
 * Make0() recursively binds a target, searches for #included headers,
 * calls itself on those headers, and calls itself on any dependents.
 */

static void
make0( t, pbinding, ptime, depth, counts, anyhow )
TARGET	*t;
int	pbinding;	/* parent target's binding */
time_t	ptime;		/* parent target's timestamp */
int	depth;		/* for display purposes */
COUNTS	*counts;	/* for reporting */
int	anyhow;		/* forcibly touch all (real) targets */
{
	TARGETS	*c;
	int	fate, hfate;
	time_t	last, leaf, hlast, hleaf;
	char	*flag = "";

	if( DEBUG_MAKEPROG )
	    printf( "make\t--\t%s%s\n", spaces( depth ), t->name );

	/* 
	 * Step 1: don't remake if already trying or tried 
	 */

	switch( t->fate )
	{
	case T_FATE_MAKING:
	    printf( "warning: %s depends on itself\n", t->name );
	    return;

	default:
	    return;

	case T_FATE_INIT:
	    break;
	}

	t->fate = T_FATE_MAKING;

	/*
	 * Step 2: under the influence of "on target" variables,
	 * bind the target and search for headers.
	 */

	/* Step 2a: set "on target" variables. */

	pushsettings( t->settings );

	/* Step 2b: find and timestamp the target file (if it's a file). */

	if( t->binding == T_BIND_UNBOUND && !( t->flags & T_FLAG_NOTFILE ) )
	{
	    t->boundname = search( t->name, &t->time );
	    t->binding = t->time ? T_BIND_EXISTS : T_BIND_MISSING;
	}

	/* If temp file doesn't exist, use parent */

	if( t->binding == T_BIND_MISSING && t->flags & T_FLAG_TEMP && ptime )
	{
	    t->time = ptime;
	    t->binding = t->time ? T_BIND_PARENTS : T_BIND_MISSING;
	}

	/* Step 2c: If its a file, search for headers. */

	if( t->binding == T_BIND_EXISTS )
	    headers( t );

	/* Step 2d: reset "on target" variables */

	popsettings( t->settings );

	/* 
	 * Pause for a little progress reporting 
	 */

	if( DEBUG_BIND )
	{
	    if( strcmp( t->name, t->boundname ) )
	    {
		printf( "bind\t--\t%s%s: %s\n",
			spaces( depth ), t->name, t->boundname );
	    }

	    switch( t->binding )
	    {
	    case T_BIND_UNBOUND:
	    case T_BIND_MISSING:
	    case T_BIND_PARENTS:
		printf( "time\t--\t%s%s: %s\n",
			spaces( depth ), t->name, target_bind[ t->binding ] );
		break;

	    case T_BIND_EXISTS:
		printf( "time\t--\t%s%s: %s",
			spaces( depth ), t->name, ctime( &t->time ) );
		break;
	    }
	}

	/* 
	 * Step 3: recursively make0() dependents 
	 */

	last = 0;
	leaf = 0;
	fate = T_FATE_STABLE;

	for( c = t->deps[ T_DEPS_DEPENDS ]; c; c = c->next )
	{
	    make0( c->target, t->binding, t->time, depth + 1, counts, anyhow );
	    leaf = max( leaf, c->target->leaf );
	    leaf = max( leaf, c->target->hleaf );

	    /* If LEAVES has been applied, we only heed the timestamps of */
	    /* the leaf source nodes. */

	    if( t->flags & T_FLAG_LEAVES )
	    {
		last = leaf;
		continue;
	    }

	    last = max( last, c->target->time );
	    last = max( last, c->target->htime );
	    fate = max( fate, c->target->fate );
	    fate = max( fate, c->target->hfate );
	}

	/* If a NOUPDATE file exists, make dependents eternally old. */

	if( t->flags & T_FLAG_NOUPDATE )
	{
	    last = 0;
	    t->time = 0;
	}

	/* Step 3b: determine fate: rebuild target or what? */

	/* 
	    In English:
		If can't find or make child, can't make target.
		If children changed, make target.
		If target missing, make it.
		If children newer, make target.
		If temp's children newer, make temp.
		If deliberately touched, make it.
		If up-to-date temp file present, use it.
		If target exists but parent not, mark target newer.
		If target newer than parent, mark target newer.
		Don't propagate child's "newer" status.
	*/

	if( fate >= T_FATE_BROKEN )
	{
	    fate = T_FATE_CANTMAKE;
	}
	else if( fate >= T_FATE_SPOIL )
	{
	    fate = T_FATE_UPDATE;
	}
	else if( t->binding == T_BIND_MISSING )
	{
	    fate = T_FATE_MISSING;
	}
	else if( t->binding == T_BIND_EXISTS && last > t->time )
	{
	    fate = T_FATE_OUTDATED;
	}
	else if( t->binding == T_BIND_PARENTS && last > t->time )
	{
	    fate = T_FATE_OUTDATED;
	}
	else if( t->flags & T_FLAG_TOUCHED )
	{
	    fate = T_FATE_TOUCHED;
	}
	else if( anyhow && !( t->flags & T_FLAG_NOUPDATE ) )
	{
	    fate = T_FATE_TOUCHED;
	}
	else if( t->binding == T_BIND_EXISTS && t->flags & T_FLAG_TEMP )
	{
	    fate = T_FATE_ISTMP;
	}
	else if( t->binding == T_BIND_EXISTS && pbinding == T_BIND_MISSING )
	{
	    fate = T_FATE_NEWER;
	}
	else if( t->binding == T_BIND_EXISTS && ptime && t->time > ptime )
	{
	    fate = T_FATE_NEWER;
	}
	else if( fate == T_FATE_NEWER )
	{
	    fate = T_FATE_STABLE;
	}

	/* Step 3c: handle missing files */
	/* If it's missing and there are no actions to create it, boom. */
	/* If we can't make a target we don't care about, 'sokay */
	/* We could insist that there are updating actions for all missing */
	/* files, but if they have dependents we just pretend it's NOTFILE. */

	if( fate == T_FATE_MISSING && 
		!t->actions && 
		!t->deps[ T_DEPS_DEPENDS ] )
	{
	    if( t->flags & T_FLAG_NOCARE )
	    {
		fate = T_FATE_STABLE;
	    }
	    else
	    {
		printf( "don't know how to make %s\n", t->name );

		fate = T_FATE_CANTFIND;
	    }
	}

	/* Step 3d: propagate dependents' time & fate. */
	/* Set leaf time to be our time only if this is a leaf. */

	t->time = max( t->time, last );
	t->leaf = leaf ? leaf : t->time ;
	t->fate = fate;

	/*
	 * Step 4: Recursively make0() headers.
	 */

	/* Step 4a: recursively make0() headers */

	hlast = 0;
	hleaf = 0;
	hfate = T_FATE_STABLE;

	for( c = t->deps[ T_DEPS_INCLUDES ]; c; c = c->next )
	{
	    make0( c->target, pbinding, ptime, depth + 1, counts, anyhow );
	    hlast = max( hlast, c->target->time );
	    hlast = max( hlast, c->target->htime );
	    hleaf = max( hleaf, c->target->leaf );
	    hleaf = max( hleaf, c->target->hleaf );
	    hfate = max( hfate, c->target->fate );
	    hfate = max( hfate, c->target->hfate );
	}

	/* Step 4b: propagate dependents' time & fate. */

	t->htime = hlast;
	t->hleaf = hleaf ? hleaf : t->htime;
	t->hfate = hfate;

	/* 
	 * Step 5: a little harmless tabulating for tracing purposes 
	 */

	if( !( ++counts->targets % 1000 ) && DEBUG_MAKE )
	    printf( "...patience...\n" );

	if( fate == T_FATE_ISTMP )
	    counts->temp++;
	else if( fate == T_FATE_CANTFIND )
	    counts->cantfind++;
	else if( fate == T_FATE_CANTMAKE && t->actions )
	    counts->cantmake++;
	else if( fate >= T_FATE_BUILD && fate < T_FATE_BROKEN && t->actions )
	    counts->updating++;

	if( !( t->flags & T_FLAG_NOTFILE ) && fate >= T_FATE_SPOIL )
	    flag = "+";
	else if( t->binding == T_BIND_EXISTS && ptime && t->time > ptime )
	    flag = "*";

	if( DEBUG_MAKEPROG )
	    printf( "made%s\t%s\t%s%s\n", 
		flag, target_fate[ t->fate ], 
		spaces( depth ), t->name );
}

@


1.20
log
@@
text
@d114 1
a114 1
	if( DEBUG_MAKEQ )
a117 4
	}

	if( DEBUG_MAKE )
	{
@


1.19
log
@@
text
@d295 1
d338 4
@


1.18
log
@@
text
@d108 2
a109 1
	    make0( bindtarget( targets[i] ), (time_t)0, 0, counts, anyhow );
d111 3
d148 1
a148 1
make0( t, parent, depth, counts, anyhow )
d150 5
a154 4
time_t	parent;
int	depth;
COUNTS	*counts;
int	anyhow;
d202 1
a202 1
	if( t->binding == T_BIND_MISSING && t->flags & T_FLAG_TEMP && parent )
d204 1
a204 1
	    t->time = parent;
d255 1
a255 1
	    make0( c->target, t->time, depth + 1, counts, anyhow );
d293 2
a294 1
		If target newer than parent, mark it so.
d329 5
a333 1
	else if( t->binding == T_BIND_EXISTS && parent && t->time > parent )
d379 1
a379 1
	    make0( c->target, parent, depth + 1, counts, anyhow );
d412 1
a412 1
	else if( t->binding == T_BIND_EXISTS && parent && t->time > parent )
@


1.17
log
@@
text
@d68 11
a78 10
	"init",
	"making",
	"ok",
	"touched",
	"temp",
	"missing",
	"old",
	"update",
	"nofind",
	"nomake"
d288 1
d291 1
a291 1
	if( fate >= T_FATE_CANTFIND )
d295 1
a295 1
	else if( fate > T_FATE_STABLE )
d323 4
d397 1
a397 1
	else if( fate > T_FATE_STABLE && fate < T_FATE_CANTFIND && t->actions )
d400 1
a400 1
	if( !( t->flags & T_FLAG_NOTFILE ) && fate > T_FATE_STABLE )
@


1.16
log
@@
text
@d80 8
d212 28
d400 1
a400 1
	    printf( "make%s\t%s\t%s%s\n", 
@


1.15
log
@@
text
@d86 1
a86 1
void
d94 1
d119 2
d122 3
a124 1
	    make1( bindtarget( targets[i] ) );
@


1.14
log
@@
text
@d119 1
a119 1
	    make1( bindtarget( targets[i] ), counts );
@


1.13
log
@@
text
@d53 1
d55 1
@


1.12
log
@@
text
@d35 1
d266 5
a270 1
	else if( t->flags & T_FLAG_TOUCHED || anyhow )
@


1.11
log
@@
text
@d33 1
a33 1
 * 02/02/95 (seiwald) - propagate leaf source time for new Laura rule.
d209 1
a209 1
	    /* If Laura has been applied, we only heed the timestamps of */
d212 1
a212 1
	    if( t->flags & T_FLAG_LAURA )
@


1.10
log
@@
text
@d34 1
d183 1
a183 1
	    t->binding = t->time ? T_BIND_TEMP : T_BIND_MISSING;
d224 8
d261 1
a261 1
	else if( t->binding == T_BIND_TEMP && last > t->time )
@


1.9
log
@@
text
@d33 1
d135 1
a135 1
	time_t	last, hlast;
a197 2
	/* Step 3a: recursively make0() dependents */

d199 1
d205 12
d224 1
a235 4

	/* If children newer than target or */
	/* If target doesn't exist, rebuild.  */

d268 2
d271 3
a273 1
	if( fate==T_FATE_MISSING && !t->actions && !t->deps[ T_DEPS_DEPENDS ] )
d282 1
d288 1
d291 1
d301 1
d309 2
d318 1
d328 1
a328 3
	if( fate > T_FATE_ISTMP && fate < T_FATE_CANTFIND && t->actions )
	    counts->updating++;
	else if( fate == T_FATE_ISTMP )
d334 2
@


1.8
log
@@
text
@a215 1
		If target still unbound (i.e. NOTFILE), make it.
a234 4
	else if( t->binding == T_BIND_UNBOUND )
	{
	    fate = T_FATE_UPDATE;
	}
@


1.7
log
@@
text
@d212 13
d236 4
a251 4
	else if( t->binding == T_BIND_EXISTS && t->flags & T_FLAG_TEMP )
	{
	    fate = T_FATE_ISTMP;
	}
d256 4
@


1.6
log
@@
text
@d71 2
a72 2
	"can't find",
	"can't make"
@


1.5
log
@@
text
@d32 1
a32 1
 * 01/19/95 (seiwald) - don't consider target buildable if child isn't
d55 2
a56 1
	int	dontknow;
d71 2
a72 1
	"can't"
d107 4
a110 2
	    if( counts->dontknow )
		printf( "...can't make %d target(s)...\n", counts->dontknow );
d215 1
a215 1
	if( fate == T_FATE_DONTKNOW )
d217 1
a217 1
	    /* can't build child, can't build parent */
a255 1
		fate = T_FATE_DONTKNOW;
d257 1
d296 1
a296 1
	if( fate > T_FATE_ISTMP && fate < T_FATE_DONTKNOW && t->actions )
d300 4
a303 2
	else if( fate == T_FATE_DONTKNOW )
	    counts->dontknow++;
@


1.4
log
@@
text
@d32 1
d211 1
a211 1
	if( fate > T_FATE_STABLE )
d213 4
d292 1
a292 1
	if( fate > T_FATE_ISTMP && t->actions )
@


1.3
log
@@
text
@d2 3
a4 1
 * Copyright 1993 Christopher Seiwald.
@


1.2
log
@@
text
@d28 2
d204 1
a204 20
	/* Step 3b: recursively make0() headers */

	hlast = 0;
	hfate = T_FATE_STABLE;

	for( c = t->deps[ T_DEPS_INCLUDES ]; c; c = c->next )
	{
	    make0( c->target, parent, depth + 1, counts, anyhow );
	    hlast = max( hlast, c->target->time );
	    hlast = max( hlast, c->target->htime );
	    hfate = max( hfate, c->target->fate );
	    hfate = max( hfate, c->target->hfate );
	}

	/* 
	 * Step 4: aftermath: determine fate and propapate dependents time
	 * and fate.
	 */

	/* Step 4a: determine fate: rebuild target or what? */
d233 1
a233 1
	/* Step 4b: handle missing files */
d237 1
a237 1
	if( fate == T_FATE_MISSING && !t->actions && !t->deps[ T_DEPS_DEPENDS ] )
d250 1
a250 1
	/* Step 4c: Step 6: propagate dependents' time & fate. */
d255 20
@


1.1
log
@@
text
@d13 4
d22 6
a27 6
 * 	make1() - execute commands to update a TARGET
 * 	make1a() - execute all actions to build a target
 *	make1b() - execute single command to update a target
 *	make1c() - execute a (piecemeal) piece of a command to update a target
 *	make1u() - remove targets after interrupted command
 *	makexlist() - turn a list of targets into a LIST, for $(<) and $(>)
d41 1
a41 1
# include "execcmd.h"
a43 7
static void make1();
static int make1a();
static int make1b();
static int make1c();
static int make1chunk();
static void make1u();
static LIST *makexlist();
a54 3
# define DONTCARE	0
# define DOCARE		1

d75 1
a75 1
make( n_targets, targets )
d78 1
d86 1
a86 1
	    make0( bindtarget( targets[i] ), (time_t)0, 0, counts );
d116 1
a116 1
make0( t, parent, depth, counts )
d121 1
d161 1
a161 1
	if( t->binding == T_BIND_UNBOUND && !( t->flags & T_FLAG_NOTIME ) )
d193 1
a193 1
	for( c = t->deps; c; c = c->next )
d195 1
a195 1
	    make0( c->target, t->time, depth + 1, counts );
d207 1
a207 1
	for( c = t->headers; c; c = c->next )
d209 1
a209 1
	    make0( c->target, parent, depth + 1, counts );
d245 1
a245 1
	else if( t->flags & T_FLAG_TOUCHED )
d254 1
a254 1
	if( fate == T_FATE_MISSING && !t->actions && !t->deps )
d289 3
a291 1
	if( t->binding == T_BIND_EXISTS && parent && t->time > parent )
a299 365
/*
 * make1() - execute commands to update a TARGET
 */

static void
make1( t, counts )
TARGET	*t;
COUNTS	*counts;
{
	TARGETS	*c;
	char *failed = "dependents";

	/* Don't remake if already trying or tried */

	if( t->progress != T_MAKE_INIT )
		return;

	t->progress = T_MAKE_STABLE;

	/* recurseively make1() headers */

	for( c = t->headers; c && t->progress != T_MAKE_INTR; c = c->next )
	{
	    make1( c->target, counts );

	    if( c->target->progress > t->progress )
	    {
	    	t->progress = c->target->progress;
		failed = c->target->name;
	    }
	}

	/* recursively make1() dependents */

	for( c = t->deps; c && t->progress != T_MAKE_INTR; c = c->next )
	{
	    make1( c->target, counts );

	    if( c->target->progress > t->progress )
	    {
	    	t->progress = c->target->progress;
		failed = c->target->name;
	    }
	}

	/* If it's missing and there are no actions to create it, boom. */
	/* if reasonable, execute all actions to make target */

	if( t->progress == T_MAKE_FAIL )
	{
	    printf( "%s skipped for lack of %s\n", t->name, failed );
	}
	else if( t->progress == T_MAKE_INTR )
	{
	    return;
	}
	else switch( t->fate )
	{
	case T_FATE_INIT:
	case T_FATE_MAKING:
	    /* shouldn't happen */ ;

	case T_FATE_STABLE:
	    break;

	case T_FATE_ISTMP:
	    if( DEBUG_MAKEQ )
		printf( "using %s\n", t->name );
	    t->progress = T_MAKE_OK;
	    break;

	case T_FATE_MISSING:
	case T_FATE_OUTDATED:
	case T_FATE_UPDATE:
	    /* Set "on target" vars, execute actions, unset vars */

	    pushsettings( t->settings );
	    t->progress = make1a( t->name, t->actions );
	    popsettings( t->settings );

	    if( !( ++counts->made % 100 ) && DEBUG_MAKE )
		printf( "...on %dth target...\n", counts->made );

	    break;

	case T_FATE_DONTKNOW:
	    t->progress = T_MAKE_FAIL;
	    break;
	}
}

/*
 * make1a() - execute all actions to build a target
 *
 * Executes all actions to build a given target, if the actions haven't
 * been executed previously.
 *
 * Returns:
 *	T_MAKE_FAIL	execution of command failed
 *	T_MAKE_OK	execution successful
 */

static int
make1a( name, actions )
char	*name;
ACTIONS *actions;
{
	/* Step through actions */
	/* Actions may be shared with other targets or grouped with */
	/* RULE_TOGETHER, so actions already executed are expected. */

	for( ; actions; actions = actions->next )
	{
	    ACTION  *action = actions->action;
	    RULE    *rule = action->rule;
	    LIST    *targets;
	    LIST    *sources;
	    ACTIONS *a1;

	    /* Only do rules with commands to execute. */
	    /* If this action has already been executed, use saved progress */

	    if( !rule->actions )
		continue;
	    
	    switch( action->progress )
	    {
	    case T_MAKE_OK:	continue;
	    case T_MAKE_FAIL:	return T_MAKE_FAIL;
	    case T_MAKE_INIT:	/* fall through */;
	    }

	    /* Make LISTS of targets and sources */
	    /* If `execute together` has been specified for this rule, tack */
	    /* on sources from each instance of this rule for this target. */

	    targets = makexlist( (LIST *)0, action->targets, 0 );
	    sources = makexlist( (LIST *)0, action->sources, 
					rule->flags & RULE_NEWSRCS );

	    if( rule->flags & RULE_TOGETHER )
		for( a1 = actions->next; a1; a1 = a1->next )
		    if( a1->action->rule == rule )
	    {
		sources = makexlist( sources, a1->action->sources, 
					rule->flags & RULE_NEWSRCS );
	    }

	    /* Execute single command, saving progress */
	    /* If `execute together` has been specified for this rule, */
	    /* distribute progress to each instance of this rule. */

	    if( rule->flags & RULE_QUIETLY ? DEBUG_MAKEQ : DEBUG_MAKE )
		printf( "%s %s\n", rule->name, name );

	    action->progress = make1b( rule, targets, sources );

	    if( rule->flags & RULE_TOGETHER )
		for( a1 = actions->next; a1; a1 = a1->next )
		    if( a1->action->rule == rule )
	    {
		a1->action->progress = action->progress;
	    }

	    /* Free target & source lists */

	    list_free( targets );
	    list_free( sources );

	    /* Abandon target if any rule fails. */

	    if( action->progress != T_MAKE_OK )
		return action->progress;
	}
	
	return T_MAKE_OK;
}

/*
 * make1b() - execute single command to update a target
 *
 * Returns:
 *	T_MAKE_FAIL	execution of command failed
 *	T_MAKE_OK	execution successful
 */

static int
make1b( rule, targets, sources )
RULE	*rule;
LIST	*targets;
LIST	*sources;
{
	int	chunk = 0;
	LIST	*somes;
	int	status = T_MAKE_OK;

	/* If rule is to be cut into (at most) MAXCMD pieces, estimate */
	/* bytes per $(>) element and aim for using MAXCMD minus a two */
	/* element pad. */

	if( rule->flags & RULE_PIECEMEAL )
	    chunk = make1chunk( rule->actions, targets, sources );

	/* If cutting rule up, make separate invocations of make1c() for */
	/* each chunk of $(>).  Otherwise, do it 'ole. */

	if( DEBUG_EXEC && chunk )
	    printf( "%d arguments per invocation\n", chunk );

	if( chunk )
	{
	    int start;

	    for( start = 0;
	         somes = list_sublist( sources, start, chunk );
		 start += chunk )
	    {
		status = make1c( rule, targets, somes );
		list_free( somes );
		
		if( status != T_MAKE_OK )
		    break;
	    }
	}
	else
	{
	    status = make1c( rule, targets, sources );
	}

	/* If the command was interrupted and the target is not */
	/* "precious", remove the targets */

	if( status == T_MAKE_INTR && !( rule->flags & RULE_TOGETHER ) )
	    make1u( targets );

	return status;
}

/* 
 * make1c() - execute a (piecemeal) piece of a command to update a target
 */

static int
make1c( rule, targets, sources )
RULE	*rule;
LIST	*targets;
LIST	*sources;
{
	int	len;
	char    buf[ MAXCMD ];

	len = var_string( rule->actions, buf, targets, sources );
	
	if( len > MAXCMD )
	{
	    /* Can't do much here - we just blew our stack! */
	    printf( "fatal error: command too long\n" );
	    exit( -1 );
	}

	if( DEBUG_EXEC )
	    printf( "%s\n", buf );

	if( globs.noexec )
	    return T_MAKE_OK;

	if( DEBUG_MAKE )
	    fflush( stdout );
	
	switch( execcmd( buf ) )
	{
	case EXEC_CMD_OK:
	    return T_MAKE_OK;

	case EXEC_CMD_FAIL:
	    if( rule->flags & RULE_IGNORE )
		return T_MAKE_OK;

	    return T_MAKE_FAIL;

	case EXEC_CMD_INTR: 
	    printf( "...interrupted\n" );
	    return T_MAKE_INTR;

	default:
	    return T_MAKE_FAIL; /* NOTREACHED */
	}
}

static int
make1chunk( cmd, targets, sources )
char	*cmd;
LIST	*targets;
LIST	*sources;
{
	int onesize;
	int onediff;
	int chunk = 0;
	LIST *somes;
	char buf[ MAXCMD ];

	somes = list_sublist( sources, 0, 1 );
	onesize = var_string( cmd, buf, targets, somes );
	list_free( somes );

	somes = list_sublist( sources, 0, 2 );
	onediff = var_string( cmd, buf, targets, somes ) - onesize;
	list_free( somes );

	if( onediff > 0 )
	    chunk = 3 * ( MAXCMD - onesize ) / 4 / onediff + 1;

	return chunk;
}

/*
 * make1u() - remove targets after interrupted command
 */

static void
make1u( targets )
LIST *targets;
{
	for( ; targets; targets = list_next( targets ) )
	{
	    if( !unlink( targets->string ) )
		printf( "%s removed\n", targets->string );
	}
}

/*
 * makexlist() - turn a list of targets into a LIST, for $(<) and $(>)
 */

static LIST *
makexlist( l, targets, newonly )
LIST	*l;
TARGETS	*targets;
int	newonly;
{
    for( ; targets; targets = targets->next )
    {
	TARGET *t = targets->target;

	/*
	 * spot the kludge!  If a target is not in the dependency tree,
	 * it didn't get bound by make0(), so we have to do it here.
	 * Ugly.
	 */

	if( t->binding == T_BIND_UNBOUND && !( t->flags & T_FLAG_NOTIME ) )
	{
	    printf( "warning: using independent target %s\n", t->name );
	    pushsettings( t->settings );
	    t->boundname = search( t->name, &t->time );
	    t->binding = t->time ? T_BIND_EXISTS : T_BIND_MISSING;
	    popsettings( t->settings );
	}

	if( !newonly || t->fate > T_FATE_STABLE )
		l = list_new( l, copystr( t->boundname ) );
    }

    return l;
}
@
