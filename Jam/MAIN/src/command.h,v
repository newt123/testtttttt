head     1.5;
access   ;
symbols  ;
locks    ;comment  @@;


1.5
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.4;

1.4
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.15;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.14;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.12;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@@
text
@/*
 * Copyright 1994 Christopher Seiwald.
 *
 * This file is part of Jam - see jam.c for Copyright information.
 */

/*
 * command.h - the CMD structure and routines to manipulate them
 *
 * Both ACTION and CMD contain a rule, targets, and sources.  An
 * ACTION describes a rule to be applied to the given targets and
 * sources; a CMD is what actually gets executed by the shell.  The
 * differences are due to:
 *
 *	ACTIONS must be combined if 'actions together' is given.
 *	ACTIONS must be split if 'actions piecemeal' is given.
 *	ACTIONS must have current sources omitted for 'actions updated'.
 */

/*
 * CMD - an action, ready to be formatted into a buffer and executed
 */

typedef struct _cmd CMD;

struct _cmd
{
	CMD	*next;
	CMD	*tail;		/* valid on in head */
	RULE	*rule;		/* rule->actions contains shell script */
	LIST	*shell;		/* $(SHELL) value */
	LOL	args;		/* LISTs for $(<), $(>) */
	char	buf[ CMDBUF ];	/* actual commands */
} ;

CMD 	*cmd_new();
void	cmd_free();

# define cmd_next( c ) ((c)->next)
@


1.4
log
@@
text
@d33 1
a33 1
	char	buf[ MAXCMD ];	/* actual commands */
@


1.3
log
@@
text
@a30 2
	LIST	*targets;	/* LIST for $(<) */
	LIST	*sources;	/* LIST for $(>) */
d32 1
@


1.2
log
@@
text
@d33 1
@


1.1
log
@@
text
@d3 2
@
