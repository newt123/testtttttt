head     1.35;
access   ;
symbols  ;
locks    ;comment  @@;


1.35
date     2005.01.27.09.35.41;  author p4;  state Exp;
branches ;
next     1.34;

1.34
date     2005.01.27.09.35.40;  author p4;  state Exp;
branches ;
next     1.33;

1.33
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.32;

1.32
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.31;

1.31
date     2005.01.27.09.35.38;  author p4;  state Exp;
branches ;
next     1.30;

1.30
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.29;

1.29
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.28;

1.28
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.27;

1.27
date     2005.01.27.09.35.34;  author p4;  state Exp;
branches ;
next     1.26;

1.26
date     2005.01.27.09.35.33;  author p4;  state Exp;
branches ;
next     1.25;

1.25
date     2005.01.27.09.35.33;  author p4;  state Exp;
branches ;
next     1.24;

1.24
date     2005.01.27.09.35.33;  author p4;  state Exp;
branches ;
next     1.23;

1.23
date     2005.01.27.09.35.32;  author p4;  state Exp;
branches ;
next     1.22;

1.22
date     2005.01.27.09.35.32;  author p4;  state Exp;
branches ;
next     1.21;

1.21
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.20;

1.20
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.19;

1.19
date     2005.01.27.09.35.28;  author p4;  state Exp;
branches ;
next     1.18;

1.18
date     2005.01.27.09.35.27;  author p4;  state Exp;
branches ;
next     1.17;

1.17
date     2005.01.27.09.35.26;  author p4;  state Exp;
branches ;
next     1.16;

1.16
date     2005.01.27.09.35.25;  author p4;  state Exp;
branches ;
next     1.15;

1.15
date     2005.01.27.09.35.24;  author p4;  state Exp;
branches ;
next     1.14;

1.14
date     2005.01.27.09.35.24;  author p4;  state Exp;
branches ;
next     1.13;

1.13
date     2005.01.27.09.35.23;  author p4;  state Exp;
branches ;
next     1.12;

1.12
date     2005.01.27.09.35.22;  author p4;  state Exp;
branches ;
next     1.11;

1.11
date     2005.01.27.09.35.22;  author p4;  state Exp;
branches ;
next     1.10;

1.10
date     2005.01.27.09.35.22;  author p4;  state Exp;
branches ;
next     1.9;

1.9
date     2005.01.27.09.35.19;  author p4;  state Exp;
branches ;
next     1.8;

1.8
date     2005.01.27.09.35.19;  author p4;  state Exp;
branches ;
next     1.7;

1.7
date     2005.01.27.09.35.18;  author p4;  state Exp;
branches ;
next     1.6;

1.6
date     2005.01.27.09.35.18;  author p4;  state Exp;
branches ;
next     1.5;

1.5
date     2005.01.27.09.35.16;  author p4;  state Exp;
branches ;
next     1.4;

1.4
date     2005.01.27.09.35.16;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.15;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.14;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.12;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.35
log
@@
text
@/*
 * /+\
 * +\	Copyright 1993, 1996 Christopher Seiwald.
 * \+/
 *
 * This file is part of jam.
 *
 * License is hereby granted to use this software and distribute it
 * freely, as long as this copyright notice is retained and modifications 
 * are clearly marked.
 *
 * ALL WARRANTIES ARE HEREBY DISCLAIMED.
 */

# include "jam.h"
# include "option.h"
# include "make.h"
# ifdef FATFS
# include "patchlev.h"
# else
# include "patchlevel.h"
# endif

/* These get various function declarations. */

# include "lists.h"
# include "parse.h"
# include "variable.h"
# include "compile.h"
# include "rules.h"
# include "newstr.h"
# include "scan.h"
# ifdef FATFS
# include "timestam.h"
# else
# include "timestamp.h"
# endif

/* Macintosh is "special" */

# ifdef macintosh
# include <QuickDraw.h>
# endif

/*
 * jam.c - make redux
 *
 * See jam(1) and Jamfile(5) for usage information.
 *
 * These comments document the code.
 *
 * The top half of the code is structured such:
 *
 *                       jam 
 *                      / | \ 
 *                 +---+  |  \
 *                /       |   \ 
 *         jamgram     option  \ 
 *        /  |   \              \
 *       /   |    \              \
 *      /    |     \             |
 *  scan     |     compile      make
 *   |       |    /    \       / |  \
 *   |       |   /      \     /  |   \
 *   |       |  /        \   /   |    \
 * jambase parse         rules  search make1
 *                               |	|   \
 *                               |	|    \
 *                               |	|     \
 *                           timestamp command execute
 *
 *
 * The support routines are called by all of the above, but themselves
 * are layered thus:
 *
 *                     variable|expand
 *                      /  |   |   |
 *                     /   |   |   |
 *                    /    |   |   |
 *                 lists   |   |   filesys
 *                    \    |   |
 *                     \   |   |
 *                      \  |   |
 *                     newstr  |
 *                        \    |
 *                         \   |
 *                          \  |
 *                          hash
 *
 * Roughly, the modules are:
 *
 *	command.c - maintain lists of commands
 *	compile.c - compile parsed jam statements
 *	execunix.c - execute a shell script on UNIX
 *	execvms.c - execute a shell script, ala VMS
 *	expand.c - expand a buffer, given variable values
 *	fileunix.c - manipulate file names and scan directories on UNIX
 *	filevms.c - manipulate file names and scan directories on VMS
 *	hash.c - simple in-memory hashing routines 
 *	headers.c - handle #includes in source files
 *	jambase.c - compilable copy of Jambase
 *	jamgram.y - jam grammar
 *	lists.c - maintain lists of strings
 *	make.c - bring a target up to date, once rules are in place
 *	make1.c - execute command to bring targets up to date
 *	newstr.c - string manipulation routines
 *	option.c - command line option processing
 *	parse.c - make and destroy parse trees as driven by the parser
 *	regexp.c - Henry Spencer's regexp
 *	rules.c - access to RULEs, TARGETs, and ACTIONs
 *	scan.c - the jam yacc scanner
 *	search.c - find a target along $(SEARCH) or $(LOCATE) 
 *	timestamp.c - get the timestamp of a file or archive member
 *	variable.c - handle jam multi-element variables
 *
 * 05/04/94 (seiwald) - async multiprocess (-j) support
 * 02/08/95 (seiwald) - -n implies -d2.
 * 02/22/95 (seiwald) - -v for version info.
 */

struct globs globs = {
	0,			/* noexec */
	1,			/* jobs */
# ifdef macintosh
	{ 0, 0 }		/* debug - suppress tracing output */
# else
	{ 0, 1 } 		/* debug ... */
# endif
} ;

/* Symbols to be defined as true for use in Jambase */

static char *othersyms[] = { OSSYMS OSPLATSYM, JAMVERSYM, 0 } ;

# ifndef __WATCOM__
# ifndef __OS2__
# ifndef NT
extern char **environ;
# endif
# endif
# endif

# ifdef macintosh
main( int argc, char **argv, char **environ )
# else
main( argc, argv )
char	**argv;
# endif
{
	int		n;
	char		*s;
	struct option	optv[N_OPTS];
	char		*all = "all";
	int		anyhow = 0;
	int		status;

# ifdef macintosh
	InitGraf(&qd.thePort);
# endif

	argc--, argv++;

	if( ( n = getoptions( argc, argv, "d:j:f:s:t:anv", optv ) ) < 0 )
	{
	    printf( "\nusage: jam [ options ] targets...\n\n" );

            printf( "-a      Build all targets, even if they are current.\n" );
            printf( "-dx     Set the debug level to x (0-9).\n" );
            printf( "-fx     Read x instead of Jambase.\n" );
            printf( "-jx     Run up to x shell commands concurrently.\n" );
            printf( "-n      Don't actually execute the updating actions.\n" );
	    printf( "-sx=y   Set variable x=y, overriding environment.\n" );
            printf( "-tx     Rebuild x, even if it is up-to-date.\n" );
            printf( "-v      Print the version of jam and exit.\n\n" );

	    exit( EXITBAD );
	}

	argc -= n, argv += n;

	/* Version info. */

	if( ( s = getoptval( optv, 'v', 0 ) ) )
	{
	    printf( "Jam/MR  " );
	    printf( "Version %s.%s.  ", VERSION, PATCHLEVEL );
	    printf( "Copyright 1993, 1997 Christopher Seiwald.\n" );

	    return EXITOK;
	}

	/* Pick up interesting options */

	if( ( s = getoptval( optv, 'n', 0 ) ) )
	    globs.noexec++, globs.debug[2] = 1;

	if( ( s = getoptval( optv, 'a', 0 ) ) )
	    anyhow++;

	if( ( s = getoptval( optv, 'j', 0 ) ) )
	    globs.jobs = atoi( s );

	/* Turn on/off debugging */

	for( n = 0; s = getoptval( optv, 'd', n ); n++ )
	{
	    int i;

	    /* First -d, turn off defaults. */

	    if( !n )
		for( i = 0; i < DEBUG_MAX; i++ )
		    globs.debug[i] = 0;

	    i = atoi( s );

	    if( i < 0 || i >= DEBUG_MAX )
	    {
		printf( "Invalid debug level '%s'.\n", s );
		continue;
	    }

	    /* n turns on levels 1-n */
	    /* +n turns on level n */

	    if( *s == '+' )
		globs.debug[i] = 1;
	    else while( i )
		globs.debug[i--] = 1;
	}

	/* Set JAMDATE first */

	{
	    char *date;
	    time_t clock;
	    time( &clock );
	    date = newstr( ctime( &clock ) );

	    /* Trim newline from date */

	    if( strlen( date ) == 25 )
		date[ 24 ] = 0;

	    var_set( "JAMDATE", list_new( L0, newstr( date ) ), VAR_SET );
	}

	/* load up environment variables */

	var_defines( environ );
	var_defines( othersyms );

	/* Load up variables set on command line. */

	for( n = 0; s = getoptval( optv, 's', n ); n++ )
	{
	    char *symv[2];
	    symv[0] = s;
	    symv[1] = 0;
	    var_defines( symv );
	}

	/* Initialize builtins */

	compile_builtins();

	/* Parse ruleset */

	for( n = 0; s = getoptval( optv, 'f', n ); n++ )
	    parse_file( s );

	if( !n )
	    parse_file( "+" );

	status = yyanyerrors();

	/* Manually touch -t targets */

	for( n = 0; s = getoptval( optv, 't', n ); n++ )
	    touchtarget( s );

	/* Now make target */

	if( !argc )
	    status |= make( 1, &all, anyhow );
	else
	    status |= make( argc, argv, anyhow );

	/* Widely scattered cleanup */

	var_done();
	donerules();
	donestamps();
	donestr();

	return status ? EXITBAD : EXITOK;
}
@


1.34
log
@@
text
@d133 1
a133 1
static char *othersyms[] = { OTHERSYMS, JAMVERSYM, 0 } ;
@


1.33
log
@@
text
@a249 1
	var_defines( othersyms );
d251 1
@


1.32
log
@@
text
@d185 1
a185 1
	    printf( "Jam - make(1) redux.  " );
d187 1
a187 1
	    printf( "Copyright 1993, 1996 Christopher Seiwald.\n" );
@


1.31
log
@@
text
@d29 1
d263 4
d270 1
a270 4
	{
	    yyfparse( s );
	    yyparse();
	}
d273 1
a273 4
	{
	    yyfparse( "+" );
	    yyparse();
	}
@


1.30
log
@@
text
@d136 1
d140 1
@


1.29
log
@@
text
@d38 6
d154 4
@


1.28
log
@@
text
@d117 3
d121 1
@


1.27
log
@@
text
@d130 3
d135 1
@


1.26
log
@@
text
@d224 1
a224 1
	    var_set( "JAMDATE", list_new( L0, newstr( date ), VAR_SET ) );
@


1.25
log
@@
text
@d191 2
a192 2
		for( i = DEBUG_MAX; i; )
		    globs.debug[i--] = 0;
@


1.24
log
@@
text
@d125 1
d128 1
@


1.23
log
@@
text
@d184 7
a190 2
	    int i = atoi( s );
	    int j;
d192 2
d200 1
a201 1
	    /* Just a number turns on levels 1..n, off n+1..max */
d205 18
a222 2
	    else for( j = 0; j < DEBUG_MAX; j++ )
		globs.debug[j] = j <= i;
@


1.22
log
@@
text
@d240 4
a243 1
	status |= make( argc ? argc : 1, argc ? argv : &all, anyhow );
@


1.21
log
@@
text
@d124 1
a124 1
# ifndef __OS2__
@


1.20
log
@@
text
@d123 2
d126 1
@


1.19
log
@@
text
@d133 1
d228 2
d237 1
a237 4
	if( argc )
	    make( argc, argv, anyhow );
	else
	    make( 1, &all, anyhow );
d246 1
a246 1
	return EXITOK;
@


1.18
log
@@
text
@d185 1
a185 1
		printf( "Invalid debug level '%s'.\n" );
@


1.17
log
@@
text
@a17 1
# include "jambase.h"
d47 5
a51 6
 *                        jam 
 *                       -----
 *                      / | \ \
 *                 +---+  |  \ \
 *                /       |   \ \
 *         jamgram     jambase \ option
d56 4
a59 4
 *           |    /    \       / |  \
 *           |   /      \     /  |   \
 *           |  /        \   /   |    \
 *         parse         rules  search make1
d223 1
a223 1
	    yyiparse( "internal jambase", jambase );
@


1.16
log
@@
text
@d18 1
d48 6
a53 5
 *                       jam 
 *                      / | \
 *                 +---+  |  \
 *                /       |   \
 *         jamgram     option  \
d96 2
a109 1
 *	jamgram.yy - jam grammar
d225 1
a225 1
	    yyfparse( JAMBASE );
@


1.15
log
@@
text
@d3 1
a3 1
 * +\	Copyright 1993, 1995 Christopher Seiwald.
d159 1
a159 1
	    printf( "Copyright 1993, 1995 Christopher Seiwald.\n" );
@


1.14
log
@@
text
@a113 1
	1,			/* debug */
d115 2
a116 1
	1			/* jobs */
d167 1
a167 4
	    globs.noexec++, globs.debug = 2;

	if( ( s = getoptval( optv, 'd', 0 ) ) )
	    globs.debug = atoi( s );
d175 22
@


1.13
log
@@
text
@a123 3
char *usage = 
    "jam [-anv -j<jobs> -f<Jambase> -d<debuglevel> -t<target>...] target...";

d135 1
a135 1
	if( ( n = getoptions( argc, argv, "d:j:f:t:anv", optv ) ) < 0 )
d137 1
a137 1
	    printf( "\nusage: %s\n\n", usage );
d144 1
d183 10
@


1.12
log
@@
text
@d121 1
a121 1
static char *othersyms[] = { OTHERSYMS, 0 } ;
@


1.11
log
@@
text
@d18 3
d22 1
d32 3
d36 1
@


1.10
log
@@
text
@a21 2
# include "newstr.h"
# include "rules.h"
d24 3
a28 1
# include "variable.h"
@


1.9
log
@@
text
@d20 10
@


1.8
log
@@
text
@d107 1
a107 1
	"jam -anv -j<jobs> -f<Jambase> -d<debuglevel> -t<target>... target...";
d122 11
a132 2
		printf( "usage: %s\n", usage );
		exit( EXITBAD );
@


1.7
log
@@
text
@d18 1
d92 1
d107 1
a107 1
	"jam -na -j<jobs> -f<Jambase> -d<debuglevel> -t<target>... target...";
d120 1
a120 1
	if( ( n = getoptions( argc, argv, "d:j:f:t:na", optv ) ) < 0 )
d128 11
@


1.6
log
@@
text
@d90 1
d129 1
a129 1
	    globs.noexec++;
@


1.5
log
@@
text
@d9 2
a10 2
 * freely, as long as this notice is retained and modifications are
 * clearly marked.
d22 1
a22 1
 * See jam(1), Jambase(5), and Jamfile(5) for usage information.
@


1.4
log
@@
text
@a111 1
	char		*ruleset = JAMBASE;
d154 1
a154 1
	    yyfparse( ruleset );
@


1.3
log
@@
text
@d121 1
a121 1
		exit( 1 );
@


1.2
log
@@
text
@d6 2
@


1.1
log
@@
text
@d3 1
a3 1
 * +\	Copyright 1993 Christopher Seiwald.
d6 1
a6 1
 * Permission is granted to use this software and distribute it
d10 1
a10 2
 * The author assumes no liability for the consequences of using this
 * software.
d20 3
a22 1
 * See jam(1) and Jambase(5) for usage information.
d38 5
a42 5
 *         parse         rules  search execute
 *                               |
 *                               |
 *                               |
 *                           timestamp
d64 1
d75 1
d86 2
d92 2
a93 1
	0			/* noexec */
d102 1
a102 1
	"jam [-n] [-f<Jambase>] [-d<debuglevel>] [-t<target>...] [target...]";
d112 1
d116 1
a116 1
	if( ( n = getoptions( argc, argv, "d:f:t:n", optv ) ) < 0 )
d132 6
d165 1
a165 1
	    make( argc, argv );
d167 1
a167 1
	    make( 1, &all );
@
