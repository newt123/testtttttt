head     1.7;
access   ;
symbols  ;
locks    ;comment  @@;


1.7
date     2005.01.27.09.35.37;  author p4;  state Exp;
branches ;
next     1.6;

1.6
date     2005.01.27.09.35.35;  author p4;  state Exp;
branches ;
next     1.5;

1.5
date     2005.01.27.09.35.31;  author p4;  state Exp;
branches ;
next     1.4;

1.4
date     2005.01.27.09.35.31;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.30;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.29;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.29;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@@
text
@/*
 * Copyright 1993, 1995 Christopher Seiwald.
 *
 * This file is part of Jam - see jam.c for Copyright information.
 */

/*
 * mkjambase.c - turn Jambase into a big C structure
 *
 * Usage: mkjambase jambase.c Jambase ...
 *
 * Results look like this:
 *
 *	 char *jambase[] = {
 *	 "...\n",
 *	 ...
 *	 0 };
 *
 * Handles \'s and "'s specially; knows to delete blank and comment lines.
 *
 */

# include <stdio.h>
# include <string.h>

main( int argc, char **argv, char **envp)
{
	char buf[ 1024 ];
	FILE *fin;
	FILE *fout;
	char *p;
	int doDotC = 0;

	if( argc < 3 )
	{
	    fprintf( stderr, "usage: %s jambase.c Jambase ...\n", argv[0] );
	    return -1;
	}

	if( !( fout = fopen( argv[1], "w" ) ) )
	{
	    perror( argv[1] );
	    return -1;
	}

	/* If the file ends in .c generate a C source file */

	if( ( p = strrchr( argv[1], '.' ) ) && !strcmp( p, ".c" ) )
	    doDotC++;

	/* Now process the files */

	argc -= 2, argv += 2;

	if( doDotC )
	{
	    fprintf( fout, "/* Generated by mkjambase from Jambase */\n" );
	    fprintf( fout, "char *jambase[] = {\n" );
	}

	for( ; argc--; argv++ )
	{
	    if( !( fin = fopen( *argv, "r" ) ) )
	    {
		perror( *argv );
		return -1;
	    }

	    if( doDotC )
	    {
		fprintf( fout, "/* %s */\n", *argv );
	    }
	    else
	    {
		fprintf( fout, "### %s ###\n", *argv );
	    }

	    while( fgets( buf, sizeof( buf ), fin ) )
	    {
		if( doDotC )
		{
		    char *p = buf;

		    /* Strip leading whitespace. */

		    while( *p == ' ' || *p == '\t' || *p == '\n' )
			p++;

		    /* Drop comments and empty lines. */

		    if( *p == '#' || !*p )
			continue;

		    /* Copy */

		    putc( '"', fout );

		    for( ; *p && *p != '\n'; p++ )
			switch( *p )
		    {
		    case '\\': putc( '\\', fout ); putc( '\\', fout ); break;
		    case '"': putc( '\\', fout ); putc( '"', fout ); break;
		    default: putc( *p, fout ); break;
		    }

		    fprintf( fout, "\\n\",\n" );
		}
		else
		{
		    fprintf( fout, "%s", buf );
		}

	    }

	    fclose( fin );
	}
	    
	if( doDotC )
	    fprintf( fout, "0 };\n" );

	fclose( fout );

	return 0;
}
@


1.6
log
@@
text
@d26 1
a26 3
main( argc, argv )
int argc;
char **argv;
@


1.5
log
@@
text
@d24 1
d33 2
d48 7
d57 5
a61 2
	fprintf( fout, "/* Generated by mkjambase from Jambase */\n" );
	fprintf( fout, "char *jambase[] = {\n" );
d71 8
a78 1
	    fprintf( fout, "/* %s */\n", *argv );
d82 3
a84 1
		char *p = buf;
d86 1
a86 1
		/* Strip leading whitespace. */
d88 2
a89 2
		while( *p == ' ' || *p == '\t' || *p == '\n' )
		    p++;
d91 1
a91 1
		/* Drop comments and empty lines. */
d93 2
a94 2
		if( *p == '#' || !*p )
		    continue;
d96 1
a96 1
		/* Copy */
d98 1
a98 1
		putc( '"', fout );
d100 11
a110 2
		for( ; *p && *p != '\n'; p++ )
		    switch( *p )
d112 1
a112 3
		case '\\': putc( '\\', fout ); putc( '\\', fout ); break;
		case '"': putc( '\\', fout ); putc( '"', fout ); break;
		default: putc( *p, fout ); break;
a114 1
		fprintf( fout, "\\n\",\n" );
d120 3
a122 1
	fprintf( fout, "0 };\n" );
@


1.4
log
@@
text
@d41 1
a41 1
	    perror( argv[2] );
@


1.3
log
@@
text
@d10 1
a10 1
 * Usage: mkjambase Jambase jambase.c
d33 1
a33 7
	if( argc != 3 )
	{
	    fprintf( stderr, "usage: %s Jambase jambase.c\n", argv[0] );
	    return -1;
	}

	if( !( fin = fopen( argv[1], "r" ) ) )
d35 1
a35 1
	    perror( argv[1] );
d39 1
a39 1
	if( !( fout = fopen( argv[2], "w" ) ) )
d45 2
d50 1
a50 1
	while( fgets( buf, sizeof( buf ), fin ) )
d52 5
a56 1
	    char *p = buf;
d58 1
a58 1
	    /* Strip leading whitespace. */
d60 3
a62 2
	    while( *p == ' ' || *p == '\t' || *p == '\n' )
		p++;
d64 1
a64 1
	    /* Drop comments and empty lines. */
d66 2
a67 2
	    if( *p == '#' || !*p )
		continue;
d69 1
a69 1
	    /* Copy */
d71 2
a72 1
	    putc( '"', fout );
d74 13
a86 6
	    for( ; *p && *p != '\n'; p++ )
		switch( *p )
	    {
	    case '\\':	putc( '\\', fout ); putc( '\\', fout ); break;
	    case '"': putc( '\\', fout ); putc( '"', fout ); break;
	    default: putc( *p, fout ); break;
d89 1
a89 1
	    fprintf( fout, "\\n\",\n" );
d93 1
@


1.2
log
@@
text
@d30 2
a31 2
	FILE *fin = fopen( argv[1], "r" );
	FILE *fout = fopen( argv[2], "w" );
d39 12
@


1.1
log
@@
text
@d23 2
@
