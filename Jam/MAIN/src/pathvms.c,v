head     1.6;
access   ;
symbols  ;
locks    ;comment  @@;


1.6
date     2005.01.27.09.35.36;  author p4;  state Exp;
branches ;
next     1.5;

1.5
date     2005.01.27.09.35.36;  author p4;  state Exp;
branches ;
next     1.4;

1.4
date     2005.01.27.09.35.35;  author p4;  state Exp;
branches ;
next     1.3;

1.3
date     2005.01.27.09.35.34;  author p4;  state Exp;
branches ;
next     1.2;

1.2
date     2005.01.27.09.35.34;  author p4;  state Exp;
branches ;
next     1.1;

1.1
date     2005.01.27.09.35.29;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@@
text
@/*
 * Copyright 1993, 1995 Christopher Seiwald.
 *
 * This file is part of Jam - see jam.c for Copyright information.
 */

# ifdef VMS

# define DEBUG

/*
 * pathvms.c - manipulate file names on VMS
 *
 * External routines:
 *
 *	file_parse() - split a file name into dir/base/suffix/member
 *	file_build() - build a filename given dir/base/suffix/member
 *	file_parent() - make a FILENAME point to its parent dir
 *
 * File_parse() and file_build() just manipuate a string and a structure;
 * they do not make system calls.
 *
 * WARNING!  This file contains voodoo logic, as black magic is 
 * necessary for wrangling with VMS file name.  Woe be to people
 * who mess with this code.
 *
 * 02/09/95 (seiwald) - bungled R=[xxx] - was using directory length!
 * 05/03/96 (seiwald) - split from filevms.c
 */

# include "jam.h"
# include "filesys.h"

/*
 * file_parse() - split a file name into dir/base/suffix/member
 */

void
file_parse( file, f )
char		*file;
FILENAME	*f;
{
	char *p, *q;
	char *end;
	
	memset( (char *)f, 0, sizeof( *f ) );

	/* Look for <grist> */

	if( file[0] == '<' && ( p = strchr( file, '>' ) ) )
	{
	    f->f_grist.ptr = file;
	    f->f_grist.len = p - file;
	    file = p + 1;
	}

	/* Look for dev:[dir] or dev: */

	if( ( p = strchr( file, ']' ) ) || ( p = strchr( file, ':' ) ) )
	{
	    f->f_dir.ptr = file;
	    f->f_dir.len = p + 1 - file;
	    file = p + 1;
	}

	end = file + strlen( file );

	/* Look for (member) */

	if( ( p = strchr( file, '(' ) ) && end[-1] == ')' )
	{
	    f->f_member.ptr = p + 1;
	    f->f_member.len = end - p - 2;
	    end = p;
	} 

	/* Look for .suffix */
	/* This would be memrchr() */

	p = 0;
	q = file;

	while( q = memchr( q, '.', end - q ) )
	    p = q++;

	if( p )
	{
	    f->f_suffix.ptr = p;
	    f->f_suffix.len = end - p;
	    end = p;
	}

	/* Leaves base */

	f->f_base.ptr = file;
	f->f_base.len = end - file;

	/* Is this a directory without a file spec? */

	f->parent = 0;
}

/*
 *	dir		mods		result
 *	---		---		------
 * Rerooting:
 *
 *	(none)		:R=dev:		dev:		
 *	devd:		:R=dev:		devd:
 *	devd:[dir]	:R=dev:		devd:[dir]
 *	[.dir]		:R=dev:		dev:[dir]	questionable
 *	[dir]		:R=dev:		dev:[dir]
 *
 *	(none)		:R=[rdir]	[rdir]		questionable
 *	devd:		:R=[rdir]	devd:
 *	devd:[dir]	:R=[rdir]	devd:[dir]
 *	[.dir]		:R=[rdir]	[rdir.dir]	questionable
 *	[dir]		:R=[rdir]	[rdir]
 *
 *	(none)		:R=dev:[root]	dev:[root]
 *	devd:		:R=dev:[root]	devd:
 *	devd:[dir]	:R=dev:[root]	devd:[dir]
 *	[.dir]		:R=dev:[root]	dev:[root.dir]
 *	[dir]		:R=dev:[root]	[dir]
 *
 * Climbing to parent:
 *
 */

# define DIR_EMPTY	0	/* empty string */
# define DIR_DEV	1	/* dev: */
# define DIR_DEVDIR	2	/* dev:[dir] */
# define DIR_DOTDIR	3	/* [.dir] */
# define DIR_DASHDIR	4	/* [-] or [-.dir] */
# define DIR_ABSDIR	5	/* [dir] */
# define DIR_ROOT	6	/* [000000] or dev:[000000] */

# define G_DIR		0	/* take just dir */
# define G_ROOT		1	/* take just root */
# define G_VAD		2	/* root's dev: + [abs] */
# define G_DRD		3	/* root's dev:[dir] + [.rel] */
# define G_VRD		4	/* root's dev: + [.rel] made [abs] */
# define G_DDD		5	/* root's dev:[dir] + . + [dir] */

static int grid[7][7] = {

/* root/dir	EMPTY	DEV	DEVDIR	DOTDIR	DASH,	ABSDIR	ROOT */
/* EMPTY */	G_DIR,	G_DIR,	G_DIR,	G_DIR,	G_DIR,	G_DIR,	G_DIR,
/* DEV */	G_ROOT,	G_DIR,	G_DIR,	G_VRD,	G_VAD,	G_VAD,	G_VAD,
/* DEVDIR */	G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_VAD,	G_VAD,	G_VAD,
/* DOTDIR */	G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_DIR,	G_DIR,	G_DIR,
/* DASHDIR */	G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_DDD,	G_DIR,	G_DIR,
/* ABSDIR */	G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_DIR,	G_DIR,	G_DIR,
/* ROOT */	G_ROOT,	G_DIR,	G_DIR,	G_VRD,	G_DIR,	G_DIR,	G_DIR,

} ;

struct dirinf {
	int	flags;

	struct {
		char	*ptr;
		int	len;
	} dev, dir;
} ;

static char *
strnchr( buf, c, len )
char	*buf;
int	c;
int	len;
{
	while( len-- )
	    if( *buf && *buf++ == c )
		return buf - 1;

	return 0;
}

static void
dir_flags( buf, len, i )
char	*buf;
int	len;
struct dirinf *i;
{
	char *p;

	if( !buf || !len )
	{
	    i->flags = DIR_EMPTY;
	    i->dev.ptr =
	    i->dir.ptr = 0;
	    i->dev.len =
	    i->dir.len = 0;
	}
	else if( p = strnchr( buf, ':', len ) )
	{
	    i->dev.ptr = buf;
	    i->dev.len = p + 1 - buf;
	    i->dir.ptr = buf + i->dev.len;
	    i->dir.len = len - i->dev.len;
	    i->flags = i->dir.len && *i->dir.ptr == '[' ? DIR_DEVDIR : DIR_DEV;
	}
	else
	{
	    i->dev.ptr = buf;
	    i->dev.len = 0;
	    i->dir.ptr = buf;
	    i->dir.len = len;

	    if( *buf == '[' && buf[1] == ']' )
		i->flags = DIR_EMPTY;
	    else if( *buf == '[' && buf[1] == '.' )
		i->flags = DIR_DOTDIR;
	    else if( *buf == '[' && buf[1] == '-' )
		i->flags = DIR_DASHDIR;
	    else
		i->flags = DIR_ABSDIR;
	}

	/* But if its rooted in any way */

	if( i->dir.len == 8 && !strncmp( i->dir.ptr, "[000000]", 8 ) )
	    i->flags = DIR_ROOT;
}

/*
 * file_build() - build a filename given dir/base/suffix/member
 */

void
file_build( f, file, binding )
FILENAME	*f;
char		*file;
int		binding;
{
	char *ofile = file;
	struct dirinf root, dir;
	int g;

	/* Start with the grist.  If the current grist isn't */
	/* surrounded by <>'s, add them. */

	if( f->f_grist.len )
	{
	    if( f->f_grist.ptr[0] != '<' ) *file++ = '<';
	    memcpy( file, f->f_grist.ptr, f->f_grist.len );
	    file += f->f_grist.len;
	    if( file[-1] != '>' ) *file++ = '>';
	}

	/* Get info on root and dir for combining. */

	dir_flags( f->f_root.ptr, f->f_root.len, &root );
	dir_flags( f->f_dir.ptr, f->f_dir.len, &dir );

	/* Combine */

	switch( g = grid[ root.flags ][ dir.flags ] )
	{
	case G_DIR:	
		/* take dir */
		memcpy( file, f->f_dir.ptr, f->f_dir.len );
		file += f->f_dir.len;
		break;

	case G_ROOT:	
		/* take root */
		memcpy( file, f->f_root.ptr, f->f_root.len );
		file += f->f_root.len;
		break;

	case G_VAD:	
		/* root's dev + abs directory */
		memcpy( file, root.dev.ptr, root.dev.len );
		file += root.dev.len;
		memcpy( file, dir.dir.ptr, dir.dir.len );
		file += dir.dir.len;
		break;
		
	case G_DRD:	
	case G_DDD:
		/* root's dev:[dir] + rel directory */
		memcpy( file, f->f_root.ptr, f->f_root.len );
		file += f->f_root.len;

		/* sanity checks: root ends with ] */

		if( file[-1] == ']' )
		     --file;	

		/* Add . if separating two -'s */

		if( g == G_DDD )
		    *file++ = '.';

		/* skip [ of dir */
		memcpy( file, dir.dir.ptr + 1, dir.dir.len - 1 );
		file += dir.dir.len - 1;
		break;

	case G_VRD:	
		/* root's dev + rel directory made abs */
		memcpy( file, root.dev.ptr, root.dev.len );
		file += root.dev.len;
		*file++ = '[';
		/* skip [. of rel dir */
		memcpy( file, dir.dir.ptr + 2, dir.dir.len - 2 );
		file += dir.dir.len - 2;
		break;
	}

# ifdef DEBUG
	if( DEBUG_SEARCH && ( root.flags || dir.flags ) )
	{
		*file = 0;
		printf( "%d x %d = %d (%s)\n", root.flags, dir.flags,
			grid[ root.flags ][ dir.flags ], ofile );
	}
# endif 

	/* 
	 * Now do the special :P modifier when no file was present.
	 *	(none)		(none)
	 *	[dir1.dir2]	[dir1]
	 *	[dir]		[000000]
	 *	[.dir]		[]
	 *	[]		[]
	 */

	if( file[-1] == ']' && f->parent )
	{
	    while( file-- > ofile )
	    {
		if( *file == '.' )
		{
		    *file++ = ']';
		    break;
		}
		else if( *file == '-' )
		{
		    /* handle .- or - */
		    if( file > ofile && file[-1] == '.' )
		    	--file;
		    *file++ = ']';
		    break;
		}
		else if( *file == '[' )
		{
		    if( file[1] == ']' )
		    {
		    	file += 2;
		    }
		    else
		    {
			strcpy( file, "[000000]" );
			file += 8;
		    }
		    break;
		}
	    }
	}

	/* Now copy the file pieces. */

	if( f->f_base.len )
	{
	    memcpy( file, f->f_base.ptr, f->f_base.len );
	    file += f->f_base.len;
	}

	/* If there is no suffix, we append a "." onto all generated */
	/* names.  This keeps VMS from appending its own (wrong) idea */
	/* of what the suffix should be. */

	if( f->f_suffix.len )
	{
	    memcpy( file, f->f_suffix.ptr, f->f_suffix.len );
	    file += f->f_suffix.len;
	}
	else if( binding && f->f_base.len )
	{
	    *file++ = '.';
	}

	if( f->f_member.len )
	{
	    *file++ = '(';
	    memcpy( file, f->f_member.ptr, f->f_member.len );
	    file += f->f_member.len;
	    *file++ = ')';
	}
	*file = 0;

# ifdef DEBUG
	if( DEBUG_SEARCH )
	    printf("built %.*s + %.*s / %.*s suf %.*s mem %.*s -> %s\n", 
		    f->f_root.len, f->f_root.ptr,
		    f->f_dir.len, f->f_dir.ptr,
		    f->f_base.len, f->f_base.ptr,
		    f->f_suffix.len, f->f_suffix.ptr,
		    f->f_member.len, f->f_member.ptr,
		    ofile );
# endif
}

/*
 *	file_parent() - make a FILENAME point to its parent dir
 */

void
file_parent( f )
FILENAME *f;
{
	if( f->f_base.len )
	{
	    f->f_base.ptr =
	    f->f_suffix.ptr =
	    f->f_member.ptr = "";

	    f->f_base.len =
	    f->f_suffix.len =
	    f->f_member.len = 0;
	}
	else
	{
	    f->parent = 1;
	}
}

# endif /* VMS */
@


1.5
log
@@
text
@d133 4
a136 3
# define DIR_RELDIR	3	/* [.dir] or [-.dir] */
# define DIR_ABSDIR	4	/* [dir] */
# define DIR_ROOT	5	/* [000000] or dev:[000000] */
d138 6
a143 5
# define G_DIR		0	/* take dir */
# define G_ROOT		1	/* take root */
# define G_VAD		2	/* root's dev: + abs directory */
# define G_DRD		3	/* root's dev:[dir] + rel directory */
# define G_VRD		4	/* root's dev: + rel directory */
d145 1
a145 1
static int grid[6][6] = {
d147 8
a154 7
/* root 	dir	EMPTY	DEV	DEVDIR	RELDIR	ABSDIR	ROOT */
/* EMPTY */		G_DIR,	G_DIR,	G_DIR,	G_DIR,	G_DIR,	G_DIR,
/* DEV */		G_ROOT,	G_DIR,	G_DIR,	G_VRD,	G_VAD,	G_VAD,
/* DEVDIR */		G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_VAD,	G_VAD,
/* RELDIR */		G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_DIR,	G_DIR,
/* ABSDIR */		G_ROOT,	G_DIR,	G_DIR,	G_DRD,	G_DIR,	G_DIR,
/* ROOT */		G_ROOT,	G_DIR,	G_DIR,	G_VRD,	G_DIR,	G_DIR,
d213 4
a216 2
	    else if( *buf == '[' && ( buf[1] == '.' || buf[1] == '-' ) )
		i->flags = DIR_RELDIR;
d239 1
d259 1
a259 1
	switch( grid[ root.flags ][ dir.flags ] )
d282 1
d287 1
a287 1
		/* Two sanity checks: root ended with ], dir begins with [ */
a290 2
		if( dir.dir.ptr[0] == '[' )
		     dir.dir.ptr++, dir.dir.len--;
d292 8
a299 2
		memcpy( file, dir.dir.ptr, dir.dir.len );
		file += dir.dir.len;
d333 1
a333 1
	    while( file > ofile )
d335 1
a335 1
		if( *--file == '.' )
d340 8
a353 5
		    else if( file[1] == '-' )
		    {
			file[1] = ']';
			file += 2;
		    }
@


1.4
log
@@
text
@d9 2
d18 1
d97 4
d104 3
a106 1
 * file_flags() - find out what's in a directory name
d108 5
a112 2
 * VMS directories get complicated.  Valid combinations of root
 * and dir are:
d114 5
a118 12
 *	root		dir		result
 *	----		---		------
 *					
 *	 		[dir]		[dir]
 *	dev				dev:
 *	dev		[dir]		dev:[dir]
 *	dev:				dev:
 *	dev:		[dir]		dev:[dir]
 *	[dir]				[dir]
 *	[dir]		[dir]		[dir.dir]
 *	dev:[dir]			dev:[dir]
 *	dev:[dir]	[dir]		dev:[dir.dir]
d120 5
a124 3
 *	*		dev		dev
 *	*		dev:		dev:
 *	*		dev:[dir]	dev:[dir]
d126 2
d130 6
a135 4
# define HAS_NOTHING	0
# define HAS_DEV	0x01
# define HAS_DIR	0x02
# define HAS_COLON	0x04
d137 29
a165 2
static int
file_flags( buf, len )
d167 1
d170 3
a172 1
	int flags = 0;
d174 2
a175 2
	if( len && *buf != '[' )
	    flags |= HAS_DEV;
d177 9
a185 2
	while( len-- )
	    switch( *buf++ )
d187 13
a199 2
	case ':':	flags |= HAS_COLON; break;
	case '[':	flags |= HAS_DIR; break;
d201 6
d208 12
a219 1
	return flags;
d233 1
a233 3

	int dir_flags = HAS_DEV;
	int root_flags = 0;
d246 1
d248 2
a249 5
	if( f->f_root.len )
	{
	    root_flags = file_flags( f->f_root.ptr, f->f_root.len );
	    dir_flags = file_flags( f->f_dir.ptr, f->f_dir.len );
	}
d251 3
a253 1
	switch( dir_flags & 0x03 )
d255 4
a258 5
	case HAS_DIR:
	case HAS_NOTHING:
	    switch( root_flags & 0x03 )
	    {
	    case HAS_NOTHING:
d261 2
a262 1
	    case HAS_DEV:
d265 8
a272 2
		if( !( root_flags & HAS_COLON ) )
		    *file++ = ':';
d275 2
a276 2
	    case HAS_DIR:
	    case HAS_DEV|HAS_DIR:
d279 10
a289 1
	    }
d291 32
a322 1
	    if( dir_flags & HAS_DIR )
d324 1
a324 1
		if( root_flags & HAS_DIR )
d326 2
a327 3
		    file[-1] = '.';
		    memcpy( file, f->f_dir.ptr + 1, f->f_dir.len - 1 );
		    file += f->f_dir.len - 1;
d329 1
a329 1
		else
d331 15
a345 2
		    memcpy( file, f->f_dir.ptr, f->f_dir.len );
		    file += f->f_dir.len;
a347 8

	    break;

	case HAS_DEV:
	case HAS_DEV|HAS_DIR:
	    memcpy( file, f->f_dir.ptr, f->f_dir.len );
	    file += f->f_dir.len;
	    break;
d350 2
d380 35
@


1.3
log
@@
text
@d151 1
a151 1
file_build( f, file )
d154 1
d241 1
a241 1
	else if( f->f_base.len )
@


1.2
log
@@
text
@d49 2
a50 2
	    f->f_grist.ptr = file + 1;
	    f->f_grist.len = p - file - 1;
d160 3
d165 1
a165 1
	    *file++ = '<';
d168 1
a168 1
	    *file++ = '>';
d171 1
d231 4
@


1.1
log
@@
text
@d40 1
a40 1
	char *p; 
d75 1
d77 7
a83 1
	if( ( p = strrchr( file, '.' ) ) && p < end )
d155 1
d232 4
@
